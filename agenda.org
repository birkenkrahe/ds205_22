#+TITLE:DS Agenda
#+AUTHOR:Marcus Birkenkrahe
#+SUBTITLE: Agenda for CSC482/DSC205 Introduction to Advanced Data Science Spring 2022
#+STARTUP:overview hideblocks
#+OPTIONS: toc:nil num:nil ^:nil
* README

  This file contains the agenda overview (what I had planned), the
  objectives (what we managed to do) and (much of the) content of each
  taught session of the course. I want to avoid splitting the content
  up over many files - so that you have to navigate as little as
  possible (like a book)!

  The companion file to this file, less structured and with the
  captain's log, is the [[file:notes.org][notes.org]] file.

* Course introduction - w1s1 (01/12/22)
** Welcome

   #+attr_html: :width 500px
   [[./img/fivearmies.jpg]]

   * Aspirations - changes spring 2022
   * Ambitions - program 2021-2023
   * Antagonization - new data science credo
   * Syllabus - this course
   * DataCamp assignments
   * GNU Emacs Org-mode

   #+begin_quote
   "After a course is launched, we don't consider it to be complete: the
   launch is just the start of data collection." Richie Cotton, DataCamp
   #+end_quote

** Syllabus

   #+attr_html: :width 400px
   [[./img/syllabus.png]]

   * [[https://lyon.schoology.com/course/5516221047/materials/gp/5548463829][Syllabus in Schoology]]
   * [[https://github.com/birkenkrahe/ds205/blob/main/syllabus.org][Syllabus in GitHub]]
   * [[https://github.com/birkenkrahe/ds205/blob/main/schedule.org][Schedule in GitHub]]

** Aspirations (Changes in Spring 2022)

   Cp. [[https://github.com/birkenkrahe/dsc101/blob/main/diary.md#good-bye-12-17-2021][Good-bye fall 2021]]

   | FALL 2021                                               | SPRINT 2021                    |
   |---------------------------------------------------------+--------------------------------|
   | Base R (stick shift) instead of "TidyVerse" (automatic) | Adding the "Tidyverse"         |
   | Use of interactive notebooks (literate programming!)    | Intro to RStudio IDE and Emacs |
   | Use GitHub as a code and materials repository           | GitHub repo                    |
   | Create lots of (ungraded) tests                         | Graded quizzes and tests       |
   | Use of DataCamp assignments                             | DataCamp assignments           |
   | Avoid mathematics as much as possible                   | No math                        |
   | Reuse tests for the final exam                          | Reuse quizzes for final exam   |
   | Let students pick their own projects                    | No projects (only optional)    |

** Ambitions (DS program 2021-2023)

   | CLASS                                 | CODE            | TERM        | Topics                              |
   |---------------------------------------+-----------------+-------------+-------------------------------------|
   | Data Science Tools and Methods        | DSC 101         | Fall 2021   | R, Basic EDA, Base R                |
   | Introduction to Advanced Data Science | DSC 205         | Spring 2022 | R, Advanced EDA, Tidyverse, shell   |
   | Database Theory and Applications      | CSC 330         | Spring 2022 | SQL, SQLite                         |
   | Operating Systems                     | CSC 420         | Spring 2022 | Bash, awk, sed, regular expressions |
   | Applied Math for Data Science         | DSC 482/MTH 360 | Fall 2022   | Probability, Statistics + R         |
   | Data Visualization                    | DSC 302         | Fall 2022   | D3, Processing, Javascript, Bokeh   |
   | Machine Learning                      | DSC 305         | Spring 2023 | Predictive algorithms, neural nets  |
   | Digital Humanities                    | CSC 105         | Spring 2023 | Data science applications           |

** DataCamp

   #+attr_html: :width 400px
   [[./img/datacamp.png]]

   * Why are we using it?
   * How are we using it?
   * What will you have to do?

** Antagonization

   [[https://github.com/birkenkrahe/ds205#credo][A new credo.]]

   #+begin_quote
   “Getting it right is crucial when people’s lives are affected.”
   -Jonathan Steinhart
   #+end_quote

   #+attr_html: :width 400px
   #+caption: Lego fencing (Source: Unsplash)
   [[./img/fight.jpg]]

** What's next?

   #+attr_html: :width 400px
   [[./img/sunflowers.jpg]]

   * See [[https://github.com/birkenkrahe/ds205/blob/main/schedule.org][schedule]]:
     - install R / Emacs IDE - may do this together
     - Entry quiz (by Tue 18 Jan) - you should get > 50%
   * Watch online lecture on "Systems" (to be published)
   * Online followup notes (~notes.org~ in GitHub)
   * See you Friday 14-Jan online!
   * Hopefully Wednesday 19-Jan in class!

* Installing R / Windows PATH - w1s2 (01/14/22)
** Overview

   | HOW      | WHAT                             |
   |----------+----------------------------------|
   | Practice | Install R from CRAN              |
   |          | Set PATH environment variable    |
   |          | Test R in terminal and GUI       |
   |----------+----------------------------------|
   |          | Install GNU Emacs + ESS ([[https://github.com/birkenkrahe/org/blob/master/FAQ.org#how-can-i-install-emacs-as-a-data-science-ide-on-windows-10][FAQ]])    |
   |          | Set PATH environment variable    |
   |          | Test R in Emacs                  |
   |          | Set .emacs init file             |
   |          | Create Org file                  |
   |          | Run R code blocks in an Org file |
** Objectives

   * [X] Install R
   * [X] Set PATH environment
   * [X] Test R in terminal and GUI
   * [ ] Install GNU Emacs
   * [ ] Test R in Emacs

* Installing and setting up GNU Emacs - w2s3 (01/19/22)
** I'm back

   #+caption: "I'm back, baby."
   #+attr_html: :width 300px
   [[./img/back.jpg]]

** Overview

   | HOW      | WHAT                           |
   |----------+--------------------------------|
   | Review   | Entry quiz                     |
   |          | Quiz 1 + feedback + discussion |
   |----------+--------------------------------|
   | Practice | Install GNU Emacs + ESS ([[https://github.com/birkenkrahe/org/blob/master/FAQ.org#how-can-i-install-emacs-as-a-data-science-ide-on-windows-10][FAQ]])  |
   |          | Set PATH environment variable  |
   |          | Test R in Emacs                |
   |          | Set .emacs init file           |

** Objectives

   * [X] Install GNU Emacs + ESS
   * [X] Set PATH environment to run R in Emacs
   * [X] Test R in Emacs (however, see [[https://github.com/birkenkrahe/ds205/blob/main/FAQ.org#setting-the-path-to-r-for-emacs][course FAQ]])
   * [ ] Configure Emacs

** Next

   * Create Emacs Org file
   * Run R code blocks in an Org file
   * DataCamp assignments beginning soon!

* Understand Emacs Org-mode - w2s4 (01/21/22)
** Overview

   | HOW          | WHAT                       |
   |--------------+----------------------------|
   | Lecture/Demo | GNU Emacs [[https://orgmode.org/][Org-mode]]         |
   |--------------+----------------------------|
   | Practice     | GNU Emacs Tutorial ([[https://github.com/birkenkrahe/org/blob/master/emacs/tutor.org][gh]])    |
   | Homework     | Set ~emacs~ init file      |
   |              | Create ~.org~ file         |
   |              | Run code in an ~.org~ file |

** Objectives

   * [X] Understand what Org-mode is and what it's for
   * [ ] Create an ~.emacs~ init file for GNU Emacs
   * [ ] Create an Org file
   * [ ] Run a code block in your Org file

** Next

   * Create Emacs Org file
   * Run R code blocks in an Org file
   * DataCamp assignments beginning soon
* Customizing Emacs (init file) - w3s5 (01/24/22)
** Overview

   |--------------------------+-------------------------------------------------------|
   | HOW                      | WHAT                                                  |
   |--------------------------+-------------------------------------------------------|
   | Review                   | Quiz 2                                                |
   | Lecture/Demo             | GNU Emacs [[https://orgmode.org/][Org-mode]] (Part 2)                           |
   |                          | *New:* [[https://youtube.com/playlist?list=PLwgb17bzeNyiuQtvKtcZ_pvSSoO9ShXv8][video playlist]]                                 |
   |--------------------------+-------------------------------------------------------|
   | Practice                 | GNU Emacs Tutorial cont'd ([[https://github.com/birkenkrahe/org/blob/master/emacs/tutor.org][gh]])                        |
   | - Package manager        | ~M-x package-list-packages RET~                       |
   | - Start R shell in Emacs | ~M-x R~ (R must be installed & in the ~PATH~)         |
   | - Add init file          |.emacs sample file ([[https://github.com/birkenkrahe/org/blob/master/emacs/.emacs][GitHub]])                    |
   |--------------------------+-------------------------------------------------------|
   | [[https://lyon.schoology.com/assignment/5590403530][Assignment]][fn:1]         | Set ~emacs~ init file                                 |
   |--------------------------+-------------------------------------------------------|
   | [[https://lyon.schoology.com/assignment/5590410225][Assignment]]               | Read 2022 Data trends and predictions                 |
   |                          | Put your summary thoughts in an ~.org~ file           |
   |                          | Check the [[https://github.com/birkenkrahe/org/blob/master/FAQ.org#how-should-you-read][FAQ "How should you read?"]]                  |
   |--------------------------+-------------------------------------------------------|

** Objectives

   * [X] Create an ~.emacs~ init file for GNU Emacs
   * [ ] Create an Org file
   * [ ] Run am R code block in your Org file

** Reading assignment

   * [[https://www2.datacamp.com/rs/307-OAT-968/images/Data_Trends_and_Predictions_2022.pdf][Read "2022 Data trends and predictions"]] (DataCamp, 2022).
   * Prepare for discussion in class:
     - Which quantitative and which qualitative predictions were made?
     - What do you think how valid these predictions are?
     - Put your thoughts in an Org-mode file (filename =
       ~YourName.org~)
     - Upload your submission to [[https://github.com/birkenkrahe/ds205/tree/main/assignments/2022_predictions][assignment/2022_predictions]] on GitHub

   To identify yourself, use the ~#+AUTHOR:~ option. You can see how

   this works from the options in the header of this ~README.org~ file.

   There is no upper or lower limit on the number of words. The main
   point is to create a proper Org-mode file.

** Next

   * Create Org-mode file with R code in it and run it
   * Org-mode assignment
   * DataCamp assignments beginning soon (due Jan 31)

   #+caption: DataCamp assignments
   #+attr_html: :width 500px
   [[./img/datacamp1.png]]

* Running code in Org-mode 1 - w3s6 (01/26/22)
** Overview

   |----------+------------------------------------------------------+--------------|
   | HOW      | WHAT                                                 | Link         |
   |----------+------------------------------------------------------+--------------|
   | Preview  | DataCamp course "Intermediate R"                     | [[https://app.datacamp.com/learn/courses/intermediate-r][datacamp.com]] |
   |----------+------------------------------------------------------+--------------|
   | Demo     | Creating an Emacs Org-mode file with code and run it | [[https://github.com/birkenkrahe/ds205/blob/main/assignments/org-mode/README.org][README.org]]   |
   |----------+------------------------------------------------------+--------------|
   | Practice | Create Org-mode file with an R code block            |              |
   |----------+------------------------------------------------------+--------------|

** Objectives

   * [X] Understand DataCamp assignment 1
   * [X] Create an Org file
   * [X] Run an R code block in your Org file

** Next

   * Submit Org-mode assignment in [[https://lyon.schoology.com/assignment/5606406982/info][Schoology]]
   * DataCamp assignments due Jan 31

   #+caption: DataCamp assignments
   #+attr_html: :width 500px
   [[./img/datacamp1.png]]

* Running code in Org-mode 2 - w3s7 (01/28/22)

  1) We continue where we left it last Wednesday

  2) Fixing the .emacs problem on Windows lab computers

  3) Change of some deadlines - to finish basic Emacs training
     #+caption: deadline changes in Schoology
     #+attr_html: :width 300px
     [[./img/28012022.png]]

  4) Finish (expanded) Org-mode assignment

  5) Submit results to Schoology.

* Org-mode lab session - w4s8 (01/31/22)

  #+caption: Teaching Emacs on Dagobah
  #+attr_html: :width 400px
  [[./img/yoda.jpg]]

  #+begin_quote
  We will hold a special lab session tomorrow, Monday 31 January
  3-3.50 PM, to sort out any issues related to Emacs and R. Bring your
  own PC to the session, or work on a lab desktop. I will spend the
  time going round to make sure that you can

  * Install/ open / use the Emacs editor
  * Create, run and tangle Org-mode files with R code
  * Install / use the R programming language
  * Understand the recent program assignments

    The necessary steps are also demonstrated [[https://www.youtube.com/playlist?list=PLwgb17bzeNygo8GU6SivwwjsQj9QabqAJ][in this tutorial video
    playlist]].

  We will continue with our regular program on Wednesday, 2nd February
  at 3 PM - a short quiz will be available before.
  #+end_quote

  For those who know or can do all of this already: here's a [[https://github.com/birkenkrahe/ds205/blob/main/assignments/org-mode/2nd_assignment.org][second
  challenge]] (with solution) to practice while I sort others out.

** What's next

   * Deadline for 1st DataCamp assignment is looming ([[https://lyon.schoology.com/assignment/5603333759][Wed 2 Feb 3pm]])
   * Scenario building for "Data Trends and Predictions 2022" report
     ([[https://lyon.schoology.com/assignment/5590410225][assignment]]) - think about the 2 most important dimensions &
     watch this video about [[https://youtu.be/yVgxZnRT54E][scenario planning]]
   * Complete *quiz 3* including a *poll* on the prediction report
     before class
   * Check out the [[https://www.datacamp.com/resources/webinars/webinar-2022-data-trends-and-predictions-1][webinar recording]] with DataCamp luminaries (panel)
   * Use the breathing space to complete the Emacs tutorial (~C-h t~)

* 2022 Data Trends - w4s9 (02/02/22)

  #+begin_quote
  We meet today at 3-3.5- PM in the seminar room Lyon 106 - this room
  is directly adjacent to 104, our usual lab. We'll discuss the
  DataCamp 2022 trend report. The quiz will be available before end of
  the week. The planned first test (in class) will take place next
  Wednesday instead. ([[https://lyon.schoology.com/course/5516221047/updates][Schoology Update]])
  #+end_quote

** Overview

   |------------+----------------------------------------|
   | HOW        | WHAT                                   |
   |------------+----------------------------------------|
   | Discussion | DataCamp 2022 report on Data Trends    |
   |------------+----------------------------------------|
   | Groupwork  | Data science scenario planning ([[https://youtu.be/yVgxZnRT54E][video]]) |
   |------------+----------------------------------------|

** Objectives

   * [X] Understand the implications of the 2022 DataCamp trend report
   * [X] Understand and apply the scenario planning technique

** Next

   * Quiz 3 - Conditionals and Control Workflow (DataCamp review)
   * Test 1 (Friday 11 Feb 3 PM)
   * Interactive R notebook - Writing functions
* Studying with DataCamp - w5s10 (02/07/22)
** Overview

   |-----------+-------------------------------------------|
   | HOW       | WHAT                                      |
   |-----------+-------------------------------------------|
   | Review    | Quiz 3 - Relational and logical operators |
   |           | How to study R with DataCamp              |
   |-----------+-------------------------------------------|
   | Preview   | While and For Loops                       |
   |-----------+-------------------------------------------|
   | Lecture   | Writing functions in R                    |
   |-----------+-------------------------------------------|
   | Test info | Test 1 on Friday 11 Feb 3.05-3.50 pm      |
   |-----------+-------------------------------------------|

** Objectives

   * [X] Review quiz 3 & how to study with DataCamp

   * [X] Understand test conditions (Friday 11 Feb)

   * [ ] Understand how to write functions in R (lecture)
** Test 1 info

   * Online in Schoology
   * Entry quiz and Quiz 1-3 are not visible during the test
   * The 10 hardest questions of entry quiy + quiz 1-3 (< 50%)
   * 10 new questions
   * Maximum time = 45 min

** Next

   * Interactive R notebook - loop problems
   * Test 1 (Friday 11 Feb 3 PM)

* Installing packages, using index vectors - w5s11 (02/09/22)
** Overview

   |---------+---------------------------------|
   | HOW     | WHAT                            |
   |---------+---------------------------------|
   | Review  | While and For loops             |
   |---------+---------------------------------|
   | Lecture | Writing functions in R (part 1) |
   |---------+---------------------------------|

** Objectives

   * [X] Org-mode ~PROPERTY~ "shebang" stuff (meta data)

   * [X] Review: install packages and loading datasets

   * [X] Understanding and using index vectors

** Next

   * Test 1 (Friday 11 Feb 3-3.50 PM)
   * Matthew Stewart, Stone Ward (Friday 18 Feb 3-3.50 PM)

* Writing functions 1- w6s13 - (02/14/22)
** News

   * [[https://improvetheworld.net/student-programs/student-innovation-challenge/][2022 Data analytics competition (accounting data)]]
   * Matthew Stewart, Stone Ward (Fri 18 Feb 3-3.50 PM) in Derby 209

** Overview

   |----------------------------+---------------------------------+---|
   | HOW                        | WHAT                            |   |
   |----------------------------+---------------------------------+---|
   | Class assignments          | How do they work?               |   |
   |----------------------------+---------------------------------+---|
   | Practice Class assignments | Write a hello world function    |   |
   |                            | Installing loading packages     |   |
   |                            | .Rprofile configuration file    |   |
   |----------------------------+---------------------------------+---|
   | Review                     | Writing functions (DataCamp)    |   |
   |----------------------------+---------------------------------+---|
   | Interactive Lecture        | [[https://github.com/birkenkrahe/ds205/blob/main/functions.org][Writing functions in R]] (part 2) |   |
   |                            | Statistical functions in R      |   |
   |----------------------------+---------------------------------+---|
** Objectives

   * [X] Mark guest talk in your calendar (Fri 18-Feb) Derby 209

   * [X] Understand how "class assignments" work

   * [X] Complete a couple of class assignments

   * [ ] Practice: install packages and loading datasets

   * [ ] Review DataCamp chapter on writing functions

** How do class assignments work?

   * In-class assignments are *10%* of your total grade
   * They are labeled *class assignments* in the Schoology gradebook
   * You get the points if you attend and participate *actively*
   * If you check your phone instead, you're *not* active
   * If you could not attend (with a good excuse), submit *late*
   * Submit an *Org-mode file*, not a screenshot

** Next

   * Wednesday: Review of test 1
   * See some fun plotting techniques

* IN PROGRESS Reviewing test 1 - w6s14 (02/16/22)
** News

   * Eliminated some DataCamp assignments
   * Remaining assignments mostly bi-weekly
   * Emacs package of the week: ~xkcd~

** xkcd - life is too serious sometimes

   * Package is pre-installed (list: ~M-x package-list-packages~)
   * ~M-x xkcd~ opens current comic
   * ~o~ in ~xkcd~ mode opens browser with current topic
   * ~C-h ? m~ opens full mode description

** Overview

   |-------------------------------------+-------------------------------|
   | HOW                                 | WHAT                          |
   |-------------------------------------+-------------------------------|
   | Review                              | Hello function                |
   |                                     | Test 1 - first month of class |
   |-------------------------------------+-------------------------------|
   | How to make up for bad test results | Complete a mini-project       |
   |-------------------------------------+-------------------------------|

** Objectives

   * [ ] Review: Hello function
   * [ ] Review: results of test 1
   * [ ] Learn how to plot a density distribution and the mean
   * [ ] Understand factor vectors
   * [ ] Master Vector element extraction
   * [ ] Understand the difference: Emacs Org-mode, ESS, and Base R
   * [ ] Understand R comments
   * [ ] Understand ~NA~
   * [ ] Understand the difference: object, storage class, data type
   * [ ] Understand the help available in and outside of R
   * [ ] Understand ~print~ and ~paste~
   * [ ] Understand vectorization
   * [ ] Understand purpose and properties of interactive notebooks

** CHALLENGE: Write a hello function with your name as an argument

   * You already learnt how to write a ~hello()~ function without
     arguments. Write a function that takes your name as an argument
     and prints ~"Hello, [your name]"~. Write and test the function in
     the same code block.
     #+name: hello
     #+begin_src R :exports both :session :results output
       hello <- function(name) {
           print(paste("Hello, ", name))
       }
       hello(name="Marcus")
     #+end_src

   * Another solution, this time with two arguments.
     #+name: hello2
     #+begin_src R :exports both :session :results output
       hello2 <- function(fname,lname) {
           print(paste("Hello, ", fname, lname,"!"))
       }
       hello2(fname="Marcus", lname="Birkenkrahe")
     #+end_src

** Test review
*** Paper vs Screen

    #+attr_html: :width 500px
    [[./img/xkcd.png]]

    Never again! Preparing such a test on paper and grading it while
    allowing for partial credit is a nightmare: future tests will be
    online in Schoology!

*** Test 1 results

    * The test results are not great. Better next time!
      #+caption: Test 1 results (Schoology)
      #+attr_html: :width 500px
      [[./img/test_1_stats.png]]

    * What surprised me most was that many of you did not use the
      available time. Alas, the stats don't show this number. A quick
      glance does not seem to reveal any clear pattern[fn:2].

    * When checking the stats with R, I find slightly different
      results - why is the standard deviation different, what do you
      think?
      #+name: test 1 results
      #+begin_src R :exports both :session :results output
        results <- c(15,14,16.41,11.08,13.38,16.75,8.33,
                     17.17,14.16,11.91,16.16,14.8,13.67)
        length(results)
        sd(results)
        summary(results)
      #+end_src

      #+RESULTS: test 1 results
      : 
      : [1] 13
      : 
      : [1] 2.503925
      : 
      :    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
      :    8.33   13.38   14.16   14.06   16.16   17.17

    * Let's make some plots: histogram, boxplot and density plot. 
      #+name: histogram
      #+begin_src R :exports both :session :results output graphics file :file ./img/test1hist.png
        hist(results, main="Histogram of test 1 results, CSC 330 Spring 2022")
      #+end_src

      #+RESULTS: histogram
      [[file:./img/test1hist.png]]

      #+name: boxplot
      #+begin_src R :exports both :session :results output graphics file :file ./img/test1box.png
        boxplot(results, main="Test 1 results, CSC 330 Spring 2022")
      #+end_src

      #+RESULTS: boxplot
      [[file:./img/test1box.png]]

      #+name: density
      #+begin_src R :exports both :session :results output graphics file :file ./img/test1density.png
        ave <- mean(results)
        d <- density(results)
        plot(d, col="steelblue",main="Test 1 Results CSC 330 Spring 2022")
        abline(v=ave,col="red")
      #+end_src

      #+RESULTS: density
      [[file:./img/test1density.png]]

*** Analysis - feedback and action points

    * Test 1 can now be played an unlimited number of times. I have
      added feedback to all new questions.

    * If you didn't play the other quizzes until you reached 100%, you
      had it coming. (My question: why wouldn't you do that?)

    * What surprised me most was that many of you did not use the
      available time. However, I have not (yet) been able to correlate
      test time and test success (it's a project).

    * Plots: I'd like the histogram and the density plot (a smoothened
      histogram) to peak more to the right, and for the boxplot to be
      smaller and higher up.
      
    * See also: [[https://github.com/birkenkrahe/org/blob/master/diary.org#i-can-teach-it-to-you-but-i-cannot-learn-it-for-you]["I can teach it to you but I cannot learn it for you"]]

    * Questions:
      - How did you study for this test?
      - If you didn't perform well, what will you change?
      - What can I do to help you help yourself?

    * Changes to be applied in future quizzes/tests:
      - Fewer multiple choices (max. 4)
      - Announce if a question has > 1 answer (and/or how many)

    #+caption: Feynman (via Twitter)
    #+attr_html: :width 500px
    [[./img/feynman.png]]

*** Individual questions

    Some questions do not accept a feedback option. I have put a GitHub
    link into the question field.

    * See [[https://github.com/birkenkrahe/db330/blob/main/FAQ.org#control-question-test-1-on-cloud-services][the FAQ]] for a question on the problem of "decreasing control"
      for different cloud computing architectures. Some of you will get
      points for giving the correct order, irrespective of the
      direction - because indeed there was a conflict with the DataCamp
      image showing that "control" decreases from IaaS to SaaS, and not
      the other way around - because this was with regard to loss of
      control from complexity, for both provider and customer, while I
      was asking about the customer specifically. Complexity/abstraction
      is an important parameter in system design but less relevant for
      the customer, more relevant for the provider[fn:6].

**** Customer control for different cloud architectures (Ø=0.46)

     [[https://github.com/birkenkrahe/db330/blob/main/FAQ.org#control-question-test-1-on-cloud-services][See FAQ]] - student question and answer.

**** How does MooCall sensor operate? (Ø=0.96)

     Bring the following processes in the right order.

     1) Edge computing: data are generated and pre-processed locally
     2) Cloud computing: data are processed globally to generate a signal
     3) Local computing: signal is transmitted to the user

     Feedback: The sensor is attached to the cow's tail. It records
     data as signals in the form of temperature, motion, etc. In
     relation to the cloud, the sensor (a microcontroller with minimal
     operating and processing capabilities) operators "on the edge" (of
     the cloud). It has likely an SQLite database on board, or perhaps
     something even simpler. Gathering the data and writing them to a
     file if only for transport to the cloud is the "preprocessing". In
     the next step, the signal for the end user is prepared once the
     data (from different cows, and over a longer period of time) are
     now "in the cloud". In practice this means that they are now in a
     database on a server, very likely in tabular form. The processing
     in the cloud generates a signal for the end user when the evidence
     is conclusive, and when the software used to process the data has
     reached a positive prediction: "Cow is ready to calve". Only then
     the end user, the farmer, will be notified. In another scenario,
     the farmer is continuously informed about the state of the
     cow. But this does not change anything in the data processing
     pipeline.

**** Database architecture layer and example applications (Ø=88)

     This question goes back to a slide from the DB foundation
     presentation ([[pdbm][Lemahieu et al, 2021]]).

     * The *external layer* is what the end-user sees - e.g. a manager
       looking at a dashboard, or using SQL to formulate a database
       query. The image shows entities and their attributes.

     * The *conceptual/logical layer* is the database schema that
       translates the user requirements - stored entities and their
       attributes - into a database schema. The "logical" part relates
       to the fact that this schema needs to fulfil certain conditions
       to be usable by the RDBMS - e.g. records need to be uniquely
       identifiable.

     * The *internal layer* refers to the physical implementation,
       e.g. the server infrastructure used to split up, or duplicate,
       databases over an international network.

     #+caption: Three-layer DBMS architecture (Lemahieu et al, 2021)
     #+name: schema
     #+attr_html: :width 500px
     [[./img/layers.png]]

**** Pros and Cons of SQLite (Ø=88)

     | PROS                    | CONS                              |
     |-------------------------+-----------------------------------|
     | Very lightweight        | No concurrency                    |
     | Zero configuration      | No user management                |
     | No library dependendies | Security - no data access control |
     | Highly portable         | Limited data types                |

     * See [[https://github.com/birkenkrahe/db330/blob/main/sqlite/introduction_to_sqlite.png][Introduction to SQLite (mindmap)]]. This mindmap does not give
       an explanation (or even a source) of these properties, just a
       listing. For details, see e.g. [[https://www.keycdn.com/support/sqlite-vs-mysql][keycdn]] ([[keycdn][2018]]).

**** Use case diagrams and UML (Ø=0.71)

     * UML is Unified Modeling Language - an important modeling
       framework for information systems design - from the small
       (database system) to the large (e.g. all systems of an
       airport). Use case diagrams are one of the 14 (standard) diagram
       categories of this language - and probably the easiest at that.

     * Here is a short [[https://youtu.be/zid-MVo7M-E][introductory video]] on Use Case diagrams only.

**** In research communication, "limitations" means "bias" (Ø=0.54)

     In the first video of the last DataCamp chapter on cloud computing
     for everyone, the presenter initially spends a lot of time trying
     to explain potential bias - e.g. because of the (commercial)
     sources of information. This bias effectively limits the validity
     of the presentation - high bias means that we cannot simply believe
     what we're told. Scientific publications must have a section on
     "limitations" of the research that is mainly about bias of method,
     and bias of the researcher.

**** What are "Meta Data"? (Ø=0.89)

     Meta (from Greek, "with", or "alongside") Data come with the data,
     and they are always data about data - in the case of databases,
     e.g. about the ownership of the database. Definitions, and queries
     belong to DDL, and DQL, respectively. Data design issues include
     both of these.

     An example outside of databases are the control codes for Emacs
     Org-mode files beginning with the characters ~#+~. They contain
     layout information (e.g. ~#+OPTIONS: toc:nil~) or information
     about title or authorship.

**** Database virtualization (Ø=0.61)

     Virtualization is an important principle of system abstraction:
     one abstracts from (= eliminates) the notion of physical
     location. The database appears to be in one place (at the external
     level) but at the internal level, it is distributed. The user
     never knows this.

     The same concept applies to operating systems whose
     processes are virtualized in the sense that jobs are executed by a
     concerted action of CPU, volatile memory (RAM) and non-volatile
     memory (e.g. Hard disk), while the user knows nothing about it.

**** Entering sqlite3 at the prompt opens SQLite to a transient database (Ø=0.54)
**** Which database language properties does SQLite have? (Ø=0.64)

     DDL, DML, DQL


** Concatenation and printing

   * There are many different R functions to concatenate and print:
     ~print~, ~paste~, ~cat~, ~message~. Where's the difference?

   * ~paste~ converts vectors to characters and concatenates them. It
     will be echoed as a side effect if it is the last statement of a
     function with no explicit return value.
     #+name: paste
     #+begin_src R :exports both :session :results output
       paste(c(1,2,3))
     #+end_src

     #+RESULTS: paste
     : [1] "1" "2" "3"
     : no methods found

   * ~print~ prints values - it is a generic function, i.e. it works
     on many data structures and new print methods can easily be added.
     #+name:
     #+begin_src R :exports both :session :results output
       methods(print)  # show print methods
     #+end_src

   * ~message~

   * ~cat~ (like the UNIX command)

** Next (topical)

   * Writing R system functions
   * Statistical functions
   * Reading tables with ~read.table~

* Guest talk - Stone Ward - w6s15 (02/18/22)
* TODO Writing functions 2 - w7s16 (02/21/22)
** Emacs check

   * First thing, when you sit down at your desktop in the computer
     lab, open Emacs, write a code block in ann Org-mode file
     (~test.org~), and try to run it:
     #+begin_src R :session :results output
       str(mtcars)
     #+end_src
   * If it does not work but instead complains about missing
     ~org-babel~ whatever, you need to install a ~.emacs~ file in the
     ~$HOME~ directory.
   * Download the file or its content from
     ~https://tinyurl.com/lyonemacs~. Make sure the file has the right
     name, then restart Emacs and run the code block again.
   * You unfortunately need to do this any time you sit at a computer
     in the lab you have not sat at before.
   * To make things easier, you could also put a ~.emacs~ file in your
     GDrive and download it in one go.

* TODO Reading tables with ~read.table~ - w6s15 (02/18/22)
  * References

    Birkenkrahe (Jan 11, 2022). Interactive shell vs. interactive
    notebook (literate programming demo). [[https://youtu.be/8HJGz3IYoHI][URL: youtu.be/8HJGz3IYoHI]].

    Cotton (Oct 25, 2018). How DataCamp Handles Course Quality
    [blog]. [[https://www.datacamp.com/community/blog/datacamp-quality][URL: www.datacamp.com.]]

    DataCamp (2022). 2022 Data trends and predictions. [[https://www2.datacamp.com/rs/307-OAT-968/images/Data_Trends_and_Predictions_2022.pdf][URL:
    datacamp.com.]]

    ESS (n.d.). Emacs Speaks Statistics. URL: ess.r-project.org

    Emacs Speaks Statistics (Mar 19, 2021). First Steps With Emacs
    [video]. [[https://youtu.be/1YOrd7NCGkg][URL: youtu.be/1YOrd7NCGkg]].

    GNU Emacs (n.d.). GNU Editor. URL: gnu.org/software/emacs/

    R Core Team (2021). R: A language and environment for statistical
    computing. R Foundation for Statistical Computing, Vienna, Austria.
    URL https://www.R-project.org/.

    System Crafters (Aug 1, 2021). Emacs Has a Built-in Pomodoro Timer??
    [video]. [[https://youtu.be/JbHE819kVGQ][URL: youtu.be/JbHE819kVGQ.]]

* Footnotes

[fn:1] Submission of the assignment by Monday 24 January 3pm gives 10
extra credit points.
