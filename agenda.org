#+TITLE:DS Agenda
#+AUTHOR:Marcus Birkenkrahe
#+SUBTITLE: Agenda for CSC482/DSC205 Introduction to Advanced Data Science Spring 2022
#+STARTUP:overview hideblocks
#+OPTIONS: ^:nil toc:1
#+PROPERTY: header-args:R :session :results output
* README

  This file contains the agenda overview (what I had planned), the
  objectives (what we managed to do) and (much of the) content of each
  taught session of the course. I want to avoid splitting the content
  up over many files - so that you have to navigate as little as
  possible (like a book)!

  The companion file to this file, less structured and with the
  captain's log, is the [[file:notes.org][notes.org]] file.

* Course introduction - w1s1 (12-Jan)
** Welcome

   #+attr_html: :width 500px
   [[./img/fivearmies.jpg]]

   * Aspirations - changes spring 2022
   * Ambitions - program 2021-2023
   * Antagonization - new data science credo
   * Syllabus - this course
   * DataCamp assignments
   * GNU Emacs Org-mode

   #+begin_quote
   "After a course is launched, we don't consider it to be complete: the
   launch is just the start of data collection." Richie Cotton, DataCamp
   #+end_quote

** Syllabus

   #+attr_html: :width 400px
   [[./img/syllabus.png]]

   * [[https://lyon.schoology.com/course/5516221047/materials/gp/5548463829][Syllabus in Schoology]]
   * [[https://github.com/birkenkrahe/ds205/blob/main/syllabus.org][Syllabus in GitHub]]
   * [[https://github.com/birkenkrahe/ds205/blob/main/schedule.org][Schedule in GitHub]]

** Aspirations (Changes in Spring 2022)

   Cp. [[https://github.com/birkenkrahe/dsc101/blob/main/diary.md#good-bye-12-17-2021][Good-bye fall 2021]]

   | FALL 2021                                               | SPRINT 2021                    |
   |---------------------------------------------------------+--------------------------------|
   | Base R (stick shift) instead of "TidyVerse" (automatic) | Adding the "Tidyverse"         |
   | Use of interactive notebooks (literate programming!)    | Intro to RStudio IDE and Emacs |
   | Use GitHub as a code and materials repository           | GitHub repo                    |
   | Create lots of (ungraded) tests                         | Graded quizzes and tests       |
   | Use of DataCamp assignments                             | DataCamp assignments           |
   | Avoid mathematics as much as possible                   | No math                        |
   | Reuse tests for the final exam                          | Reuse quizzes for final exam   |
   | Let students pick their own projects                    | No projects (only optional)    |

** Ambitions (DS program 2021-2023)

   | CLASS                                 | CODE            | TERM        | Topics                              |
   |---------------------------------------+-----------------+-------------+-------------------------------------|
   | Data Science Tools and Methods        | DSC 101         | Fall 2021   | R, Basic EDA, Base R                |
   | Introduction to Advanced Data Science | DSC 205         | Spring 2022 | R, Advanced EDA, Tidyverse, shell   |
   | Database Theory and Applications      | CSC 330         | Spring 2022 | SQL, SQLite                         |
   | Operating Systems                     | CSC 420         | Spring 2022 | Bash, awk, sed, regular expressions |
   | Applied Math for Data Science         | DSC 482/MTH 360 | Fall 2022   | Probability, Statistics + R         |
   | Data Visualization                    | DSC 302         | Fall 2022   | D3, Processing, Javascript, Bokeh   |
   | Machine Learning                      | DSC 305         | Spring 2023 | Predictive algorithms, neural nets  |
   | Digital Humanities                    | CSC 105         | Spring 2023 | Data science applications           |

** DataCamp

   #+attr_html: :width 400px
   [[./img/datacamp.png]]

   * Why are we using it?
   * How are we using it?
   * What will you have to do?

** Antagonization

   [[https://github.com/birkenkrahe/ds205#credo][A new credo.]]

   #+begin_quote
   “Getting it right is crucial when people’s lives are affected.”
   -Jonathan Steinhart
   #+end_quote

   #+attr_html: :width 400px
   #+caption: Lego fencing (Source: Unsplash)
   [[./img/fight.jpg]]

** What's next?

   #+attr_html: :width 400px
   [[./img/sunflowers.jpg]]

   * See [[https://github.com/birkenkrahe/ds205/blob/main/schedule.org][schedule]]:
     - install R / Emacs IDE - may do this together
     - Entry quiz (by Tue 18 Jan) - you should get > 50%
   * Watch online lecture on "Systems" (to be published)
   * Online followup notes (~notes.org~ in GitHub)
   * See you Friday 14-Jan online!
   * Hopefully Wednesday 19-Jan in class!

* Installing R / Windows PATH - w1s2 (14-Jan)
** Overview

   | HOW      | WHAT                             |
   |----------+----------------------------------|
   | Practice | Install R from CRAN              |
   |          | Set PATH environment variable    |
   |          | Test R in terminal and GUI       |
   |----------+----------------------------------|
   |          | Install GNU Emacs + ESS ([[https://github.com/birkenkrahe/org/blob/master/FAQ.org#how-can-i-install-emacs-as-a-data-science-ide-on-windows-10][FAQ]])    |
   |          | Set PATH environment variable    |
   |          | Test R in Emacs                  |
   |          | Set .emacs init file             |
   |          | Create Org file                  |
   |          | Run R code blocks in an Org file |
** Objectives

   * [X] Install R
   * [X] Set PATH environment
   * [X] Test R in terminal and GUI
   * [ ] Install GNU Emacs
   * [ ] Test R in Emacs

* Installing and setting up GNU Emacs - w2s3 (19-Jan)
** I'm back

   #+caption: "I'm back, baby."
   #+attr_html: :width 300px
   [[./img/back.jpg]]

** Overview

   | HOW      | WHAT                           |
   |----------+--------------------------------|
   | Review   | Entry quiz                     |
   |          | Quiz 1 + feedback + discussion |
   |----------+--------------------------------|
   | Practice | Install GNU Emacs + ESS ([[https://github.com/birkenkrahe/org/blob/master/FAQ.org#how-can-i-install-emacs-as-a-data-science-ide-on-windows-10][FAQ]])  |
   |          | Set PATH environment variable  |
   |          | Test R in Emacs                |
   |          | Set .emacs init file           |

** Objectives

   * [X] Install GNU Emacs + ESS
   * [X] Set PATH environment to run R in Emacs
   * [X] Test R in Emacs (however, see [[https://github.com/birkenkrahe/ds205/blob/main/FAQ.org#setting-the-path-to-r-for-emacs][course FAQ]])
   * [ ] Configure Emacs

** Next

   * Create Emacs Org file
   * Run R code blocks in an Org file
   * DataCamp assignments beginning soon!

* Understand Emacs Org-mode - w2s4 (21-Jan)
** Overview

   | HOW          | WHAT                       |
   |--------------+----------------------------|
   | Lecture/Demo | GNU Emacs [[https://orgmode.org/][Org-mode]]         |
   |--------------+----------------------------|
   | Practice     | GNU Emacs Tutorial ([[https://github.com/birkenkrahe/org/blob/master/emacs/tutor.org][gh]])    |
   | Homework     | Set ~emacs~ init file      |
   |              | Create ~.org~ file         |
   |              | Run code in an ~.org~ file |

** Objectives

   * [X] Understand what Org-mode is and what it's for
   * [ ] Create an ~.emacs~ init file for GNU Emacs
   * [ ] Create an Org file
   * [ ] Run a code block in your Org file

** Next

   * Create Emacs Org file
   * Run R code blocks in an Org file
   * DataCamp assignments beginning soon
* Customizing Emacs (init file) - w3s5 (24-Jan)
** Overview

   |--------------------------+-------------------------------------------------------|
   | HOW                      | WHAT                                                  |
   |--------------------------+-------------------------------------------------------|
   | Review                   | Quiz 2                                                |
   | Lecture/Demo             | GNU Emacs [[https://orgmode.org/][Org-mode]] (Part 2)                           |
   |                          | *New:* [[https://youtube.com/playlist?list=PLwgb17bzeNyiuQtvKtcZ_pvSSoO9ShXv8][video playlist]]                                 |
   |--------------------------+-------------------------------------------------------|
   | Practice                 | GNU Emacs Tutorial cont'd ([[https://github.com/birkenkrahe/org/blob/master/emacs/tutor.org][gh]])                        |
   | - Package manager        | ~M-x package-list-packages RET~                       |
   | - Start R shell in Emacs | ~M-x R~ (R must be installed & in the ~PATH~)         |
   | - Add init file          |.emacs sample file ([[https://github.com/birkenkrahe/org/blob/master/emacs/.emacs][GitHub]])                    |
   |--------------------------+-------------------------------------------------------|
   | [[https://lyon.schoology.com/assignment/5590403530][Assignment]][fn:1]         | Set ~emacs~ init file                                 |
   |--------------------------+-------------------------------------------------------|
   | [[https://lyon.schoology.com/assignment/5590410225][Assignment]]               | Read 2022 Data trends and predictions                 |
   |                          | Put your summary thoughts in an ~.org~ file           |
   |                          | Check the [[https://github.com/birkenkrahe/org/blob/master/FAQ.org#how-should-you-read][FAQ "How should you read?"]]                  |
   |--------------------------+-------------------------------------------------------|

** Objectives

   * [X] Create an ~.emacs~ init file for GNU Emacs
   * [ ] Create an Org file
   * [ ] Run am R code block in your Org file

** Reading assignment

   * [[https://www2.datacamp.com/rs/307-OAT-968/images/Data_Trends_and_Predictions_2022.pdf][Read "2022 Data trends and predictions"]] (DataCamp, 2022).
   * Prepare for discussion in class:
     - Which quantitative and which qualitative predictions were made?
     - What do you think how valid these predictions are?
     - Put your thoughts in an Org-mode file (filename =
       ~YourName.org~)
     - Upload your submission to [[https://github.com/birkenkrahe/ds205/tree/main/assignments/2022_predictions][assignment/2022_predictions]] on GitHub

   To identify yourself, use the ~#+AUTHOR:~ option. You can see how

   this works from the options in the header of this ~README.org~ file.

   There is no upper or lower limit on the number of words. The main
   point is to create a proper Org-mode file.

** Next

   * Create Org-mode file with R code in it and run it
   * Org-mode assignment
   * DataCamp assignments beginning soon (due Jan 31)

   #+caption: DataCamp assignments
   #+attr_html: :width 500px
   [[./img/datacamp1.png]]

* Running code in Org-mode 1 - w3s6 (26-Jan)
** Overview

   |----------+------------------------------------------------------+--------------|
   | HOW      | WHAT                                                 | Link         |
   |----------+------------------------------------------------------+--------------|
   | Preview  | DataCamp course "Intermediate R"                     | [[https://app.datacamp.com/learn/courses/intermediate-r][datacamp.com]] |
   |----------+------------------------------------------------------+--------------|
   | Demo     | Creating an Emacs Org-mode file with code and run it | [[https://github.com/birkenkrahe/ds205/blob/main/assignments/org-mode/README.org][README.org]]   |
   |----------+------------------------------------------------------+--------------|
   | Practice | Create Org-mode file with an R code block            |              |
   |----------+------------------------------------------------------+--------------|

** Objectives

   * [X] Understand DataCamp assignment 1
   * [X] Create an Org file
   * [X] Run an R code block in your Org file

** Next

   * Submit Org-mode assignment in [[https://lyon.schoology.com/assignment/5606406982/info][Schoology]]
   * DataCamp assignments due Jan 31

   #+caption: DataCamp assignments
   #+attr_html: :width 500px
   [[./img/datacamp1.png]]

* Running code in Org-mode 2 - w3s7 (28-Jan)

  1) We continue where we left it last Wednesday

  2) Fixing the .emacs problem on Windows lab computers

  3) Change of some deadlines - to finish basic Emacs training
     #+caption: deadline changes in Schoology
     #+attr_html: :width 300px
     [[./img/28012022.png]]

  4) Finish (expanded) Org-mode assignment

  5) Submit results to Schoology.

* Org-mode lab session - w4s8 (31-Jan)

  #+caption: Teaching Emacs on Dagobah
  #+attr_html: :width 400px
  [[./img/yoda.jpg]]

  #+begin_quote
  We will hold a special lab session tomorrow, Monday 31 January
  3-3.50 PM, to sort out any issues related to Emacs and R. Bring your
  own PC to the session, or work on a lab desktop. I will spend the
  time going round to make sure that you can

  * Install/ open / use the Emacs editor
  * Create, run and tangle Org-mode files with R code
  * Install / use the R programming language
  * Understand the recent program assignments

    The necessary steps are also demonstrated [[https://www.youtube.com/playlist?list=PLwgb17bzeNygo8GU6SivwwjsQj9QabqAJ][in this tutorial video
    playlist]].

  We will continue with our regular program on Wednesday, 2nd February
  at 3 PM - a short quiz will be available before.
  #+end_quote

  For those who know or can do all of this already: here's a [[https://github.com/birkenkrahe/ds205/blob/main/assignments/org-mode/2nd_assignment.org][second
  challenge]] (with solution) to practice while I sort others out.

** What's next

   * Deadline for 1st DataCamp assignment is looming ([[https://lyon.schoology.com/assignment/5603333759][Wed 2 Feb 3pm]])
   * Scenario building for "Data Trends and Predictions 2022" report
     ([[https://lyon.schoology.com/assignment/5590410225][assignment]]) - think about the 2 most important dimensions &
     watch this video about [[https://youtu.be/yVgxZnRT54E][scenario planning]]
   * Complete *quiz 3* including a *poll* on the prediction report
     before class
   * Check out the [[https://www.datacamp.com/resources/webinars/webinar-2022-data-trends-and-predictions-1][webinar recording]] with DataCamp luminaries (panel)
   * Use the breathing space to complete the Emacs tutorial (~C-h t~)

* 2022 Data Trends - w4s9 (2-Feb)

  #+begin_quote
  We meet today at 3-3.5- PM in the seminar room Lyon 106 - this room
  is directly adjacent to 104, our usual lab. We'll discuss the
  DataCamp 2022 trend report. The quiz will be available before end of
  the week. The planned first test (in class) will take place next
  Wednesday instead. ([[https://lyon.schoology.com/course/5516221047/updates][Schoology Update]])
  #+end_quote

** Overview

   |------------+----------------------------------------|
   | HOW        | WHAT                                   |
   |------------+----------------------------------------|
   | Discussion | DataCamp 2022 report on Data Trends    |
   |------------+----------------------------------------|
   | Groupwork  | Data science scenario planning ([[https://youtu.be/yVgxZnRT54E][video]]) |
   |------------+----------------------------------------|

** Objectives

   * [X] Understand the implications of the 2022 DataCamp trend report
   * [X] Understand and apply the scenario planning technique

** Next

   * Quiz 3 - Conditionals and Control Workflow (DataCamp review)
   * Test 1 (Friday 11 Feb 3 PM)
   * Interactive R notebook - Writing functions
* Studying with DataCamp - w5s10 (7-Feb)
** Overview

   |-----------+-------------------------------------------|
   | HOW       | WHAT                                      |
   |-----------+-------------------------------------------|
   | Review    | Quiz 3 - Relational and logical operators |
   |           | How to study R with DataCamp              |
   |-----------+-------------------------------------------|
   | Preview   | While and For Loops                       |
   |-----------+-------------------------------------------|
   | Lecture   | Writing functions in R                    |
   |-----------+-------------------------------------------|
   | Test info | Test 1 on Friday 11 Feb 3.05-3.50 pm      |
   |-----------+-------------------------------------------|

** Objectives

   * [X] Review quiz 3 & how to study with DataCamp

   * [X] Understand test conditions (Friday 11 Feb)

   * [ ] Understand how to write functions in R (lecture)
** Test 1 info

   * Online in Schoology
   * Entry quiz and Quiz 1-3 are not visible during the test
   * The 10 hardest questions of entry quiy + quiz 1-3 (< 50%)
   * 10 new questions
   * Maximum time = 45 min

** Next

   * Interactive R notebook - loop problems
   * Test 1 (Friday 11 Feb 3 PM)

* Installing packages, using index vectors - w5s11 (9-Feb)
** Overview

   |---------+---------------------------------|
   | HOW     | WHAT                            |
   |---------+---------------------------------|
   | Review  | While and For loops             |
   |---------+---------------------------------|
   | Lecture | Writing functions in R (part 1) |
   |---------+---------------------------------|

** Objectives

   * [X] Org-mode ~PROPERTY~ "shebang" stuff (meta data)

   * [X] Review: install packages and loading datasets

   * [X] Understanding and using index vectors

** Next

   * Test 1 (Friday 11 Feb 3-3.50 PM)
   * Matthew Stewart, Stone Ward (Friday 18 Feb 3-3.50 PM)

* Writing functions 1- w6s13 - (14-Feb)
** News

   * [[https://improvetheworld.net/student-programs/student-innovation-challenge/][2022 Data analytics competition (accounting data)]]
   * Matthew Stewart, Stone Ward (Fri 18 Feb 3-3.50 PM) in Derby 209

** Overview

   |----------------------------+---------------------------------+---|
   | HOW                        | WHAT                            |   |
   |----------------------------+---------------------------------+---|
   | Class assignments          | How do they work?               |   |
   |----------------------------+---------------------------------+---|
   | Practice Class assignments | Write a hello world function    |   |
   |                            | Installing loading packages     |   |
   |                            | .Rprofile configuration file    |   |
   |----------------------------+---------------------------------+---|
   | Review                     | Writing functions (DataCamp)    |   |
   |----------------------------+---------------------------------+---|
   | Interactive Lecture        | [[https://github.com/birkenkrahe/ds205/blob/main/functions.org][Writing functions in R]] (part 2) |   |
   |                            | Statistical functions in R      |   |
   |----------------------------+---------------------------------+---|
** Objectives

   * [X] Mark guest talk in your calendar (Fri 18-Feb) Derby 209

   * [X] Understand how "class assignments" work

   * [X] Complete a couple of class assignments

   * [ ] Practice: install packages and loading datasets

   * [ ] Review DataCamp chapter on writing functions

** How do class assignments work?

   * In-class assignments are *10%* of your total grade
   * They are labeled *class assignments* in the Schoology gradebook
   * You get the points if you attend and participate *actively*
   * If you check your phone instead, you're *not* active
   * If you could not attend (with a good excuse), submit *late*
   * Submit an *Org-mode file*, not a screenshot

** Next

   * Wednesday: Review of test 1
   * See some fun plotting techniques

* Reviewing test 1, xkcd, plots - w6s14 (16-Feb)
** News

   * Eliminated some DataCamp assignments
   * Remaining assignments mostly bi-weekly
   * Emacs package of the week: ~xkcd~

** xkcd - life is too serious sometimes

   * Package is pre-installed (list: ~M-x package-list-packages~)
   * ~M-x xkcd~ opens current comic
   * ~o~ in ~xkcd~ mode opens browser with current topic
   * ~C-h ? m~ opens full mode description

** Overview

   |-------------------------------------+-------------------------------|
   | HOW                                 | WHAT                          |
   |-------------------------------------+-------------------------------|
   | Review                              | Hello function                |
   |                                     | Test 1 - first month of class |
   |-------------------------------------+-------------------------------|
   | How to make up for bad test results | Complete a mini-project       |
   |-------------------------------------+-------------------------------|

** Objectives

   * [ ] Review: Hello function
   * [ ] Review: results of test 1
   * [ ] Learn how to plot a density distribution and the mean
   * [ ] Understand factor vectors
   * [ ] Master Vector element extraction
   * [ ] Understand the difference: Emacs Org-mode, ESS, and Base R
   * [ ] Understand R comments
   * [ ] Understand ~NA~
   * [ ] Understand the difference: object, storage class, data type
   * [ ] Understand the help available in and outside of R
   * [ ] Understand ~print~ and ~paste~
   * [ ] Understand vectorization
   * [ ] Understand purpose and properties of interactive notebooks

** CHALLENGE: Write a hello function with your name as an argument

   * You already learnt how to write a ~hello()~ function without
     arguments. Write a function that takes your name as an argument
     and prints ~"Hello, [your name]"~. Write and test the function in
     the same code block.
     #+name: hello
     #+begin_src R :exports both :session :results output
       hello <- function(name) {
         print(paste("Hello, ", name))
       }
       hello(name="Marcus")
     #+end_src

   * Another solution, this time with two arguments.
     #+name: hello2
     #+begin_src R :exports both :session :results output
       hello2 <- function(fname,lname) {
         print(paste("Hello, ", fname, lname,"!"))
       }
       hello2(fname="Marcus", lname="Birkenkrahe")
     #+end_src

** Lab 104 Emacs check

   * First thing, when you sit down at your desktop in the computer
     lab, open Emacs, write a code block in an Org-mode file
     (~test.org~), and try to run it:
     #+begin_src R :session :results output
       str(mtcars)
     #+end_src
   * If it does not work but instead complains about missing
     ~org-babel~ whatever, you need to install a ~.emacs~ file in the
     ~$HOME~ directory.
   * Download the file or its content from
     ~https://tinyurl.com/lyonemacs~. Make sure the file has the right
     name, then restart Emacs and run the code block again.
   * You unfortunately need to do this any time you sit at a computer
     in the lab you have not sat at before.
   * To make things easier, you could also put a ~.emacs~ file in your
     GDrive and download it in one go.

** Test review
*** Paper vs Screen

    #+attr_html: :width 500px
    [[./img/xkcd.png]]

    Never again! Preparing such a test on paper and grading it while
    allowing for partial credit is a nightmare: future tests will be
    online in Schoology!

*** Test 1 results

    * The test results are OK (average 70%). Better next time!
      #+caption: Test 1 results (Schoology)
      #+attr_html: :width 500px
      [[./img/test_1_stats.png]]
      #+name: results
      #+begin_src R  :results silent
        results <- c(15,14,17.41,11.08,13.38,16.75,8.33,
                     17.17,14.16,11.91,16.16,14.8,13.67)
      #+end_src

    * When checking the stats with R, I find different results. Why?[fn:2]
      #+name: test 1 stats
      #+begin_src R :exports both :session :results output
        paste("Sample:",length(results))
        paste("Standard deviation:", sd(results))
        paste("Average:", 100*mean(results)/20)
        summary(results)
      #+end_src

      #+RESULTS: test 1 stats
      : [1] "Sample: 13"
      :
      : [1] "Standard deviation: 2.59571120632991"
      :
      : [1] "Average: 70.7"
      :
      :    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
      :    8.33   13.38   14.16   14.14   16.16   17.41

    * Let's make some plots: histogram, boxplot and density plot.

    * [[https://github.com/birkenkrahe/ds205/blob/main/agenda.org#test-1-results][Fetch the vector from GitHub]] and run the code in Emacs.

    * Histogram. Demonstrates the fact that almost the entire course
      but one is above 50% (= pass). Looks more positive than the
      whole truth, because the x-axis ends with the maximum result
      achieved, and not with the maximum points available (20).
      #+name: histogram
      #+begin_src R :exports both :session :results output graphics file :file ./img/test1hist.png
        hist(results, main="Test 1 results, DSC 205 Spring 2022")
      #+end_src

      #+RESULTS: histogram
      [[file:./img/test1hist.png]]

    * Boxplot: this graph is deceptively positive, because it doesn't
      show the maximum points (20) but only the maximum achieved
      points. The "whiskers" correspond to the outliers, and the thick
      black line is the median (the middle value).
      #+name: boxplot
      #+begin_src R :exports both :session :results output graphics file :file ./img/test1box.png
        boxplot(results, main="Test 1 results, DSC 205 Spring 2022")
      #+end_src

      #+RESULTS: boxplot
      [[file:./img/test1box.png]]

    * Density plot: this is a smoothed histogram, and it does not look
      quite as positive as the histogram. Negative outliers are rather
      overaccentuated.
      #+name: density
      #+begin_src R :exports both :session :results output graphics file :file ./img/test1density.png
        ave <- mean(results)
        med <- median(results)
        d <- density(results)
        plot(d, col="steelblue",main="Test 1 Results DSC 205 Spring 2022")
        abline(v=ave,col="red")
        abline(v=med,col="green")
      #+end_src

      #+RESULTS: density
      [[file:./img/test1density.png]]

*** Analysis - feedback and action points

    * Test 1 can now be played an unlimited number of times. I will
      add feedback to all new questions by the end of today.

    * If you didn't play the other quizzes until you reached 100%, you
      had it coming. (My question: why wouldn't you do that?)

    * What surprised me most was that many of you did not use the
      available time. However, I have not (yet) been able to correlate
      test time and test success (it's a project).

    * Plots: I'd like the histogram and the density plot (a smoothened
      histogram) to peak more to the right, and for the boxplot to be
      smaller and higher up.

    * See also: [[https://github.com/birkenkrahe/org/blob/master/diary.org#i-can-teach-it-to-you-but-i-cannot-learn-it-for-you]["I can teach it to you but I cannot learn it for you"]]

    * Questions:
      - How did you study for this test?
      - If you didn't perform well, what will you change?
      - What can I do to help you help yourself?

    * Changes to be applied in future quizzes/tests:
      - Fewer multiple choices (max. 4)
      - Announce if a question has > 1 answer (and/or how many)
      - Try to avoid having > 1 test on the same day

    #+caption: Feynman (via Twitter)
    #+attr_html: :width 500px
    [[./img/feynman.png]]

** Next (topical)

   * Writing R system functions
   * Statistical functions
   * Reading tables with ~read.table~

* Guest talk - Stone Ward - w6s15 (18-Feb)
** Potential questions:

   These are my questions informed e.g. by the 2022 data trends report.

   1. What do your clients typically expect from you with regard to data
      science?
   2. In the 2022 data trends report, we read that "upskilling [with
      data literacy skills] becomes a mandate". What is the level of
      data literacy (with examples) at Stone Ward? Where would you like
      it to be?
   3. How well did your studies prepare you for what you're doing now as
      a data scientist?
   4. What should undergraduates at Lyon know before they decide to
      embark on a potential career as data scientists or data analysts?
   5. How important is machine learning in 2022 - and where is it going?
   6. If you compare data science from an industry perspective 5 years
      ago, now, and 5 years from now - what's different?
   7. What should students know before they approach you/Stone Ward for
      internships? What if they approach Stone Ward for a job?
   8. What about a data science minor/major: important? Useful?
      Relevant?
   9. Which projects would you like students to have attempted or
      completed? Is project experience important at all?
   10. Which soft skills are most relevant at Stone Ward?

** Presentation questions:

   These are some of my questions after leafing through a pre-view of
   Matthew's presentation [[https://docs.google.com/presentation/d/1PAqtrx59bYGcWCG37zu4GyXPfZC3FguOv_bNXBPorfM/edit?usp=sharing]["Data in Business"]]:

   1) Why do clients want analysis? What do they do with the results?
      (Example)
   2) Are clients typically more interested in descriptive (historic),
      prescriptive (normative) or predictive (future) analyses?
   3) How much time do you still spend coding? Reading about R, new
      packages etc. How important do you think this is?
   4) Tidyverse or base R?
   5) How important is Excel to your work? How important is it to your
      clients still? (Compared to R or Python, or platforms like
      Tableau or Power BI)
   6) What's with Plato's cave!?
   7) Clients only remember "1-3 numbers" - which numbers are these
      (example)? How would I know what's important to them?
   8) What if I screw up as a data analyst (example)?
   9) How did you learn to talk about data and data science?
   10) Do clients ever ask you for helicopter presentations like
       these, or only data analysis presentations (close to the result)?
   11) What is a "non-data minded person"? (What are they missing?)
   12) Who is on the analytics team?
   13) Have you had interns or employees from Lyon College yet?
   14) Can you tell us more about the scope of the problem or problems
       to be tackled in a mini-internship? How much does a student
       have to know?
   15) How large are the data sets that you encounter at
       clients?[fn:3]
   16)

* Guest talk - Post mortem - w7s16 (21-Feb)
** News

   * If you answered TRUE for question 18 on vectorization, contact me
     and you'll get an extra point for your test. My question was too
     confusing because the comparison could be seen as vectorization:
     check with ~is.vector("hello")~ - scalars and characters are
     internally represented as vectors, hence the simultaneous
     application of an operator (~<~) to all its elements could be
     called vectorization!

** Objectives

   [[https://docs.google.com/presentation/d/1PAqtrx59bYGcWCG37zu4GyXPfZC3FguOv_bNXBPorfM/edit?usp=sharing][Link to the slides]]

   * [ ] Summarize talk (small group discussion + presentation)
   * [ ] Identify what is most relevant to you
   * [ ] Critically review claims and recommendations
   * [ ] Apply the presentation to your own learning and career
   * [ ] Learn more about the Google Data Analytics certificate
   * [ ] Understand the problems with Excel
   * [ ] Understand the difference between the "Tidyverse" and Base R
   * [ ] Learn more about ~ggplot2~

** Overview

   | WHAT          | HOW                               |
   |---------------+-----------------------------------|
   | Discussion in | What did you think?               |
   | small groups  | Summarize main messages           |
   |---------------+-----------------------------------|
   | Overview      | Google Data Analytics Certificate |
   |               | Excel Errors                      |
   |               | Tidyverse vs. Base R              |
   |               | The ~ggplot2~ package             |

** What did you think of the talk?

   * Summarize the main messages of the presentation?
   * What were your personal takeaways?
   * Is there anything you'd like to know from me?
   * Do you want to have more presentations like this one?
   * Are you interested in the mini-internships at all?

** Next

   * Writing functions
   * Reading tables
   * ~apply~ family of functions

* Emacs recent files, Writing functions 2 - w8s17 (28-Feb)
** News

   * Updated schedule: ~Rcpp~, ~bash~, ~Excel~ and ~SQLite~
   * Interesting [[https://github.com/birkenkrahe/ds205/issues][GitHub issues]] for "forward studying"
   * The quizzes are hard(er): I uploaded [[https://github.com/birkenkrahe/ds205/tree/main/quizzes][PDF versions to GitHub]]
   * Emacs package(s) of the week: ~recentf~ (and ~ace-window~)

** Objectives

   * [X] Get started with interactive Emacs notebooks
   * [X] Save and load user-defined functions
   * [X] Practice writing functions (system, +stats+)
   * [ ] Understand stats functions in R
   * [X] Learn a new Emacs package (or two)

** Emacs package of the week: how to display recent files

   * Package is actually built in. You call it with ~M-x
     recentf-open-files~, which, on my Windows Emacs, leads to this
     buffer right now (the buffer below shows the buffer list - ~C-x
     C-b~).

   * It is nice that this also works when you kill Emacs by
     mistake. It is very handy to just be able to continue your work
     after you've opened and worked in 5-10 files!
     #+caption: recent files on Emacs
     #+attr_html: :width 400px
     [[./img/recentf.png]]

   * You can put the following code into your ~.emacs~ file to bind
     the command to ~C-x r e~ (or any other available combination you
     choose), and to enable it.
     #+name: recentf
     #+begin_example
       ;; enable recentf mode and bind it to
       (recentf-mode 1)
       (global-set-key (kbd "C-x rf") 'recentf-open-files)
     #+end_example

   * More information:
     - [[https://www.masteringemacs.org/article/mastering-key-bindings-emacs][Details on Emacs keybindings]] ([[kbd][Petersen, 2019]])
     -  [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Key-Bindings.html][Customizing Key Bindings: GNU Emacs manual]] (also available
       inside Emacs: ~C-h i~ opens the Emacs info reader)

** Interactive notebook practice

   * Download [[https://drive.google.com/drive/folders/1A8yl4cnFhh-1sPO6gdb13DwEzUDDW7t1?usp=sharing][save_nb.org from GDrive]] and work through it in class.
** Next

   * Statistical functions (lecture)
   * Tour of ~apply~ (notebook)
   * ~ggplot2~ (lecture + notebook)
   * Visualizing COVID-19 (project)

* Change R download repo - w8s18 + 19 (4-Mar)
** News

   * [X] Mid-term grades - Improve your grade with a project ([[https://github.com/birkenkrahe/org/blob/master/FAQ.org#how-can-i-improve-my-mid-term-grades][FAQ]])
   * [X] Waking up in ~AppData/Roaming~? [[https://github.com/birkenkrahe/org/blob/master/FAQ.org#how-to-set-a-new-emacs-home-directory][Change your Emacs HOME now]].

** Writing functions: set default R download repo

   * Download ~repos_nb.org~ from GDrive and get cracking!
   * You can find the solution in ~repos_solution_nb.org~ in GDrive.

** Next

   * Statistical functions
   * Tour of ~apply~
   * ~ggplot2~ graphics
   * Visualizing COVID-19 (DataCapmp project)

* Graphical devices dev.list, .Library - w9s19 (7-Mar)
** News

   * [X] Waking up in ~AppData/Roaming~? [[https://github.com/birkenkrahe/org/blob/master/FAQ.org#how-to-set-a-new-emacs-home-directory][Change your Emacs HOME now]].

** Writing functions: set default R download repo

   * Download ~repos_nb.org~ from GDrive and get cracking!
   * You can find the solution in ~repos_solution_nb.org~ in GDrive.

** Next

   * Tour of ~apply~
   * ~ggplot2~ graphics
   * Visualizing COVID-19 (DataCapmp project)

* Gapminder, Pomodoro timer - Tour of ggplot - w9s20 (9-Mar)
** Preparations for test 2 (Mon 14-Mar)

   * Test 2 will only cover questions from quiz 4-6 + new questions.
   * You can find quiz 4-6 with solutions + feedback as PDF ([[https://github.com/birkenkrahe/os420/tree/main/quiz][in /quiz]])
   * I will create an update of content Org files ([[https://github.com/birkenkrahe/os420/tree/main/pdf][in pdf/]])

** Emacs package of the week: Pomorodo timer

   * Auto-complete ~org-timer-~
   * ~org-set-timer~
   * ~org-timer-start~
   * ~org-timer-stop~
   * Lines for ~.emacs~:
     #+name: init
     #+begin_src emacs-lisp
       ;; pomodoro timer
       (require 'org)
       (setq org-clock-sound "c:/Users/birkenkrahe/Documents/Sounds/ding.mp3")
     #+end_src

** Multiple device control

   Device control is quite important in all graphical program. In R,
   there are multiple functions that achieve this - look up
   ~help(dev.list)~ for the documentation, especially
   ~example(dev.list)~ (examples at the end of the help file).

   Even though the [[eXample]] is supposedly Unix-specific, it runs under
   Windows, too. ~x11~ is the windows manager. In the example, a series
   of devices is opened, used, and finally closed again.

   #+name: eXample
   #+begin_src R :exports both :session :results output
     x11()
     plot(1:10)
     x11()
     plot(rnorm(10))
     dev.set(dev.prev())
     abline(0, 1) # through the 1:10 points
     dev.set(dev.next())
     abline(h = 0, col = "gray") # for the residual plot
     dev.set(dev.prev())
     dev.off(); dev.off() #- close the two X devices
   #+end_src

   #+RESULTS:
   #+begin_example
   windows
         2
   windows
         3
   windows
         2
   windows
         3
   null device
             1
   #+end_example


   * Tour of ~apply~
   * Tour of statistical functions

** ggplot2 and dplyr

   * [X] In winter 2020 (DSC101) I gave an introductory lecture to
     ~ggplot2~ using [[https://colab.research.google.com/drive/1O5qKA7mHXd43m8ZXmgIMNj7mDua1nKW5?usp=sharing][this Google Colaboratory workbook]]. You can copy
     the workbook to your GDrive and work through it if you like.

   * [X] This workbook came from an Org-mode file that I have uploaded
     in the practice directory in GDrive as ~ggplot2_2021.zip~ with
     all plots and images required to view and run it if you so
     wish. There is a also a 24-page PDF copy in the pdf directory.

   * [X] In this advanced introductory class, we will instead dive
     right into an interesting EDA example, the gapminder dataset, to
     explore the possibilities of [[https://ggplot2.tidyverse.org/reference/][ggplot2]] and [[https://dplyr.tidyverse.org/reference/index.html][dplyr]].

   * [X] I say it once at the outset (and hopefully not too many
     times). I am not a friend of the "Tidyverse" ideology. In
     practice, I prefer ~data.table~ over ~dplyr~, and base R graphics
     over ggplot2. The reasons are manifold - [[https://github.com/matloff/TidyverseSkeptic][see here for details]].

   * [X] See also my notes on the "Tidyverse" and ggplot2 from the
     post mortem session of our guest talk by Matthew Stewart.

** Next

   * Quiz 4-6 check and test preparation
   * Visualizing COVID-19 (project)
   * ~ggplot2~ (lecture + notebook)

* Test preparation / quiz 4-6 - w9s21 (11-Mar)

  * [X] You find the materials of the past month in GitHub ([[https://github.com/birkenkrahe/ds205/tree/main/pdf][pdf/]])

  * [X] Review of quiz 4-6

  * [X] Review of DataCamp chapters "apply" and and "utilities"
    - ~lapply~, ~sapply~, ~vapply~ and their uses
    - Useful mathematical functions: ~abs~, ~sum~, ~mean~, ~round~
    - Pattern matching: ~grep~, ~grepl~, ~sub~, ~gsub~
    - Time and data manipulation and calculation

  * [X] Best way to prepare: practice "Intermediate R" in the DataCamp
    app - my questions are likely to come from that source!

* Test 2 with ggplot2, org-skeleton - w10s23 (16-Mar)
** News

   * Cleaning function with gsub in The Economist ([[https://github.com/birkenkrahe/ds205/issues/37][issue]])
   * Emacs snippet of the week: ~org-skeleton~
   * Test grades plotting with ggplot2

** Emacs snippet of the week

   * ~Org-skeleton~ is an built-in Org function but you need to
     customize it.

   * Put the code below into your ~.emacs~ file, create a new Org file,
     and enter ~M-x org-skeleton~ to automatically add the meta data.

   * You can also enter CTRL + SHIFT + F4 to activate the function

     #+begin_src emacs-lisp
       (define-skeleton org-skeleton
         "Header info for a emacs-org file."
         "Title: "
         "#+TITLE:" str " \n"
         "#+AUTHOR:" str " \n"
         "#+SUBTITLE:" str " \n"
         "#+STARTUP:overview hideblocks\n"
         "#+OPTIONS: toc:nil num:nil ^:nil\n"
         ;;  "#+email: your-email@server.com\n"
         ;;  "#+INFOJS_OPT: :view:info \n"
         ;;  "#+BABEL: :session *R* :cache yes :results output graphics :exports both :tangle yes \n"
         )
       (global-set-key [C-S-f4] 'org-skeleton)

     #+end_src

* ggplot2 boxplots - w10s24 (18-Mar)

  * COVID-10 project deadline moved
  * Finish ggplot2 boxplots
  * Retrieve updated file from GDrive

* Analysis COVID-19 DataCamp project - w11s25/26 (28/30-Mar)
** Tentative plan for the rest of the term

   * Week 11: Finish gapminder intro to ggplot2 and dplyr packages
   * Week 12: Base R bar charts, DataCamp review (categorical data)
     - No class on Friday, April 8
   * Week 13: Tableau, DataCamp review (numerical data)
   * Week 14: SQLite and R, Excel and R
   * Week 15: R and C++, data cleaning on the command line (Wyatt/Ben?)
   * Week 16: Webscraping and final project
   * 5 quizzes, 1 test, 1 final exam
   * 4 DataCamp assignments (EDA using ggplot2 and dplyr)

** Review: COVID-19 project

   Download the whole directory [[https://drive.google.com/drive/folders/1BICBxgLLplylMm1dNKGSgoHmgsdmkHfu?usp=sharing]["covid" from GDrive]] - it includes the
   data sets in the directory data, and a location for the images in img.

   Extract the file anywhere on your computer and go through the
   Org-mode workbook.

   There is a [[https://github.com/birkenkrahe/ds205/blob/main/pdf/covid_project.pdf][30-page PDF on GitHub]] with the whole workbook filled in.

   * [ ] Aspects of the project
   * [ ] Getting the data
   * [ ] Reading the data (readr vs utils)
   * [ ] Plotting with ggplot2
   * [ ] Filtering with dplyr (~filter~)
   * [ ] Grouping with dplyr (~group~)

* UpdateR, scatterplots - w11s27 (1-Apr)
** Updating R on Windows in 6 steps

   #+attr_html: :width 500px
   #+caption: Screen message (R version update)
   [[./img/update.png]]

   1) [ ] Install and load the installr package
   2) [ ] Run updateR()
   3) [ ] Keep the old version of R (4.1.2 in my case)
   4) [ ] Add new Rterm location to your PATH environment variable
   5) [ ] Set Emacs variable inferior-ess-r-program to Rterm path
   6) [ ] Restart Emacs and M-x R

** Preview: DataCamp course EDA in R

   * [X] You find the datasets at the end of the course page
   * [X] Read them into data frames using ~read_csv~ or ~read.csv~
   * [X] Introduction of the contingency table function ~table~
   * [X] Uses ~factor~ and ~levels~ (both function and attribute)
   * [X] Presents different formats of bar charts with ~geom_bar~
   * [X] Faceting with ~facet_wrap~

** Gapminder - scatterplots

   * [ ] Download the gapminder directory from [[https://drive.google.com/drive/folders/1GaE0iDWSoPexSrRUhZcKGyr8F2kSibWs?usp=sharing][GDrive]]
   * [ ] Open ~gapminder1.org~

* Faceting - w12s28 (4-Apr)
** Homekeeping

   * [ ] Add ~(setq-default org-hide-emphasis-markers t)~ to ~.emacs~, or
     customize the variable by typing ~C-h v org-hide-emphasis-markers~
     and choose ~toggle~ and ~Apply and Save~ in the menu[fn:4].

   * [ ] R 4.1.3 is missing ~Internet.dll~ - fix [fn:5]

** Review:  last time (gapminder 1)

   *Getting the data*
   * Knowing alternative paths in R is not a waste
   * Installing and loading R packages
   * Updating R packages
   * Tibble format for data frames
   * Fixing an ~Internet.dll~ issue on Windows

   *Checking and getting to know the data*
   * Reviewing structure checking commands
   * Changing the display width option
   * Printing a data frame as a tibble
   * Pipes to pass data to functions
   * Pipeline concept

   *Filtering the data*
   * Review data findings for: quality, sample, context
   * ~dplyr~ commands resemble SQL: ~select~, ~filter~, ~%in~
   * The pipe operator in ~dplyr~ is ~%>%~

** Topics

   * [ ] Assignment: writing ~dplyr~ function
   * [ ] Topics: faceting with gapminder
   * [ ] Practice workbook ~gapminder2.org~ in [[https://drive.google.com/drive/folders/1GaE0iDWSoPexSrRUhZcKGyr8F2kSibWs?usp=sharing][GDrive]]

* Time series plots - w12s29 (6-Apr)
** Emacs tip: hide emphatic characters

   To *not* see the emphatic characters like ~ or * or / in the Org file
   text, run the following code chunk (or put the code in your ~/.emacs~
   file): if successful, you should see ~"t"~ in the minibuffer.

   #+begin_src emacs-lisp :results silent
     (setq-default org-hide-emphasis-markers t)
   #+end_src

   Note: If you don't put it in your ~/.emacs~ file, the command will
   only work for the current Emacs session, and for all new buffers
   (not for buffers already opened).

   See also: [[https://lucidmanager.org/categories/productivity/][articles on becoming more *productive* with Emacs.]]
** Emacs tip: change theme to "Leuven"

   * In Emacs, open the theme selector with ~M-x custom-themes~
   * Select ~Leuven~ and click on ~Save theme settings~
   * Your code blocks are now more clearly visible

** Package tip: overviewR ([[https://github.com/birkenkrahe/ds205/issues/43][issue #43]])

   * [[https://twitter.com/daily_r_sheets/status/1511584521191366663?s=20&t=VqrGiNYJvs0xeg3XbPbXuw][Link to tweet and cheatsheet]] & [[https://cran.r-project.org/web/packages/overviewR/vignettes/overviewR_vignette.html][vignette at CRAN]]
   * This could be a cool project - exploring pros and cons

** Topics

   * [ ] Finish faceting: ~facet_wrap~ in ~gapminder2.org~
   * [ ] Topic: time series plots with ~gapminder~
   * [ ] Practice workbook ~gapminder3.org~ in [[https://drive.google.com/drive/folders/1GaE0iDWSoPexSrRUhZcKGyr8F2kSibWs?usp=sharing][GDrive]]
   * [ ] Quiz 8 = DataCamp review + time series + faceting

** Reading and writing assignment for Friday April 8

   There will be no class on *Friday, April 8*. Instead, please complete
   the following assignment:

   * [ ] Read the *introduction* to the essay [[https://github.com/matloff/TidyverseSkeptic#case-study--tidy-obstacles-to-debugging]["Teaching R in a Kinder,
     Gentler, More Effective Manner: Use Base-R, Not the Tidyverse"]]

   * [ ] Pick one of the 10 *case studies* included in the essay and
     study it so that you can answer the following questions
     1. *Message:* What's the main message of the case study?
     2. *Content:* In your own words, what is the author trying to say?
     3. *Opinion:* What are your personal views (if any) on the case study?
     4. And anything else you wish to share!

   * [ ] Post your thoughts as an [[https://github.com/birkenkrahe/ds205/issues][issue to GitHub]] (with your name and
     the title of the case study in the title of the issue).

   * [ ] You should not spend less than an hour on this
     assignment. This may include looking stuff up or trying things
     out (in R).

   *Background* to the assignment: this essay (from 2019) by R legend
   Norman Matloff has recently been [[https://matloff.wordpress.com/2022/04/02/greatly-revised-edition-of-tidyverse-skeptic/][greatly revised]]. It is important
   for any user of R because of the way the 'Tidyverse' is seen (as an
   alternative R universe). It is important for you as non-teachers,
   because you're likely to have to teach, or instruct other users of
   data (who aren't happy enough with Excel). Lastly, it's interesting
   because it's political, and to see politics, history & business so
   clearly in computing is rare and will help you grow professionally.

* Scale and value transformations - w13s30 (11-Apr)
** Housekeeping
   
  * [X] Review: Tidyverse Sceptic essay reading + writing assignment
    - RStudio is not evil, just mistaken
    - Check out [[https://youtu.be/sD39WAZo99A][Programming Games with R Shiny]] (for DataViz? Here?)
  * [X] Quiz 8 = DataCamp review + time series + faceting
  * [X] Test 3 will be available for 24 hours (we need the time)
  * [X] All quizzes are now randomized (don't learn the sequence)x

** Emacs tips - keyboard macros

   * Keyboard macros are powerful time savers
   * Example: when creating quizzes, I need to surround
     expressions with the ~ symbol to emphasize code
   * Keyboard macro: ~C-x ( [key sequence] C-x )~
   * Repeat with
   * E.g. add ~[ ]~ after each bullet point of this list
     - Type ~C-x (~ to start the macro
     - Enter exact sequence that you want repeated
     - Type ~C-x )~ to close macro definition
   * To run the macro: ~C-x e~.
     - Repeat manually with ~e~
     - Repeat N times with ~C-u N C-x e~
   * Bind the macro to a key sequence (for the session):
     - ~C-x C-k b~
     - Choose 0 to 9
   * Save it for later use:
     - Give it a /name/ with ~C-x C-k n~
     - Go to ~/.emacs~
     - Save the definition with ~M-x insert-kbd-macro RET /name/ RET~
   * In my Emacs file, my macro looks like this:
     #+begin_example emacs-lisp
      ;; surround region from point to EOL with ~
     (fset 'tt
        (kmacro-lambda-form [?~ ?\C-e ?~] 0 "%d"))
     #+end_example

   ([[https://www.gnu.org/software/emacs/manual/html_node/emacs/Save-Keyboard-Macro.html][See GNU Emacs Manual]])

** Conceptual [data science] stuff

   * This assignment completes our monthly "conceptual" series:
     - 2022 data trends: knowing what the future might hold
     - Stone Ward guest talk: knowing what the industry wants
     - Tidyverse Sceptic: knowing that there are movements

   * You do not need to deeply engage with this side of things but you
     should be aware that there are serious (/ideological/) issues.

   * Computer science and data science are also /battlefields/ where you
     may have to pick your sides and your heroes (based on /values/).

   * In an /open source/ landscape, these battles are more open and
     visible but of course they do exist in the commercial world, too.

   * We met a fourth issue (literate programming) through our Emacs
     practice - topic of my recent faculty colloquium talk ([[https://docs.google.com/presentation/d/1wA7sb41EjV6GP3oBEFsOiYnoe29WILtLJR2sHSfr6Fs/edit?usp=sharing][link]]).

   * What is programming? It has a coding and a meta part:

     #+attr_html: :width 600px
     #+caption: Programming as coding (left) and meta activity (right)
     [[./img/programming.png]]

     | *CODING*     | *EXAMPLE*     | *META-CODING* | *EXAMPLE*     |
     |------------+-------------+-------------+-------------|
     | Language   | R, C, Java  | Story       | Plotting    |
     | & paradigm | OOP, FP     | LitProg     | Emacs + Org |
     |------------+-------------+-------------+-------------|
     | Style      | "Tidyverse" | Data        | ~gapminder~   |
     | & Package  | ~data.table~  |             |             |
     |------------+-------------+-------------+-------------|
     | Flow       | ~if~, ~goto~    | Model logic | BPMN model  |
     |------------+-------------+-------------+-------------|
     | Output:    | Histogram   | Benchmark   | Performance |
     |------------+-------------+-------------+-------------|

** Scattermore demo

   * This is a cool new package. "Bazillion of points without wait."

   * Check out their [[https://github.com/exaexa/scattermore][GitHub repo]]. Demo code below.

   #+begin_src R :file scattermore.png :exports both :session :results output graphics file
     library(scattermore)

     ## create 10 million 2D datapoints
     data <- cbind(rnorm(1e7),rnorm(1e7))

     ## prepare empty plot
     par(mar=rep(0,4))

     ## plot the datapoints and see how long it takes
     system.time(plot(
       scattermore(data,
                   rgba=c(64,128,192,10),
                   xlim=c(-3,3),
                   ylim=c(-3,3))))
   #+end_src

   #+RESULTS:
   [[file:scattermore.png]]

** Topics

   * Remember: ~ggplot2~ is actually not really part of the "Tidyverse"
   * [X] Fun package: ~scattermore~ - "more points = more power"
   * [X] Scale and value transformations (~gapminder4.org~ in GDrive)
   * [ ] Review: DataCamp - EDA with R - categorical variables
   * [ ] Practice: Base-R vs. "Tidyverse" (~practice/tidyverse~)

* Boxplots and ridge plots - w13s31 (13-Apr)
** Emacs tip

   * With Emacs, you're now part of the free software world
   * With great[er] power comes great[er] responsibility
   * You need to update your Emacs packages:
     - ~M-x package-list-packages~ (will try to refresh the list)
     - In ~*Packages*~, type ~U~ to update
     - If there are packages to update, type ~x~ to execute

   #+attr_html: :width 500px
   #+caption: End of the *Packages* buffer
   [[./img/packages.png]]
   
** Topics and resources
   
  * [ ] Topic: boxplots and ridge plots with ~gapminder~ 
  * [ ] +~ggplot2~: practice workbook ~gapminder5.org~ in [[https://drive.google.com/drive/folders/1GaE0iDWSoPexSrRUhZcKGyr8F2kSibWs?usp=sharing][GDrive]]+
  * [ ] ~Base-R~: [[https://www.r-bloggers.com/2022/04/how-to-make-a-boxplot-in-r/][How to make a boxplot in R]] (Negoita, April 2022)
  * [ ] ~ggplot2~ and ~dplyr~ summary

    #+attr_html: :width 500px
    #+caption: How to make and modify boxplots (Source: R-blogger)
    [[./img/boxplot.png]]

  * [ ] Another resource: [[https://www.r-bloggers.com/2022/03/complete-tutorial-on-using-apply-functions-in-r/]['apply' functions in R]] (Cheng, 2022)

**  ~ggplot2~ and ~dplyr~ summary

*** Concepts

    * Aesthetics (~ggplot2~) = mapping of data on a plot
    * Piping (~dplyr~) = A form of summarizing / passing data on to
      other functions
    * Faceting = displaying plots in different panels (to show
      plots next to one another)
    * Other forms of showing information: stack, ridge, fill, identify
    * Object-orientation is part of R (via "S3") - everything is an
      object - in ~ggplot2~, plots become objects
    * Functional programming: analysis is done with functions, which
      can be nested
    * Layout is controlled via geometry and suitable ~geom_~ functions
    
*** Code

* EDA with categorical data - w14s32 (20-Apr)

  * [X] In software development [[https://github.com/birkenkrahe/ds205/issues/59]["Lightweight is the right weight"]]

  * [X] Followup from the math test lecture yesterday: [[https://igraph.org/r/#startr][~igraph~]]

  * [X] Book recommendation for the holidays! [[https://www.amazon.com/How-Solve-Mathematical-Penguin-Science/dp/0140124993/]["How to solve it"]] by
    George Pólya (1990 - see also [[https://www.wtamu.edu/academic/anns/mps/math/mathlab/int_algebra/int_alg_tut8_probsol.htm][application example]]).

    #+attr_html: :width 200px
    #+caption: Perennial classic: Pólya's HOW TO SOLVE IT
    [[./img/polya.jpg]]
    
  * [X] Exploring Categorical Data workbook ([[https://drive.google.com/drive/folders/1Qc2bDvV7oJH4mnBzqLdcCe5_n2uQvzKy?usp=sharing][eda_1.org in GDrive]]) -
    solutions in the pdf/ directory in GitHub

* EDA with numerical data - w14s33 (22-Apr)
  
* C++ and R (Wyatt) - w15s34 (27-Apr)
* Data science on the command line (Ben) - w15s35 (29-Apr)
* gganimate()? Excel and R? Tableau? - w16s36 (2-May)
* SQLite and R? - w17s37 (4-May)
* References
  * Birkenkrahe (Jan 11, 2022). Interactive shell vs. interactive
    notebook (literate programming demo). [[https://youtu.be/8HJGz3IYoHI][URL: youtu.be/8HJGz3IYoHI]].
  * Cheng (Mar 8, 2022). Complete tutorial on using 'apply' functions
    in R - How to use apply(), lapply(), sapply(), and tapply(), and
    how they compare to using dplyr [blog]. [[https://www.rforecology.com/post/how-to-use-apply-functions/][URL: rforecology.com]].
  * Cotton (Oct 25, 2018). How DataCamp Handles Course Quality
    [blog]. [[https://www.datacamp.com/community/blog/datacamp-quality][URL: www.datacamp.com.]]
  * DataCamp (2022). 2022 Data trends and predictions. [[https://www2.datacamp.com/rs/307-OAT-968/images/Data_Trends_and_Predictions_2022.pdf][URL:
    datacamp.com.]]
  * ESS (n.d.). Emacs Speaks Statistics. URL: ess.r-project.org
  * Emacs Speaks Statistics (Mar 19, 2021). First Steps With Emacs
    [video]. [[https://youtu.be/1YOrd7NCGkg][URL: youtu.be/1YOrd7NCGkg]].
  * GNU Emacs (n.d.). GNU Editor. URL: gnu.org/software/emacs/
  * Negoita (Apr 6, 2022). How to make a boxplot in R - The complete
    beginner's tutorial on boxplots in R [blog].
  * <<kbd>> Petersen (2019). Mastering Key Bindings in Emacs
    [website]. [[https://www.masteringemacs.org/article/mastering-key-bindings-emacs][URL: masteringemacs.org]].
  * R Core Team (2021). R: A language and environment for statistical
    computing. R Foundation for Statistical Computing, Vienna,
    Austria. URL https://www.R-project.org/.
  * System Crafters (Aug 1, 2021). Emacs Has a Built-in Pomodoro
    Timer?? [video]. [[https://youtu.be/JbHE819kVGQ][URL: youtu.be/JbHE819kVGQ.]]
* Footnotes

[fn:5]On my machine, R version 4.1.3 cannot open documentation in a
browser. This seems to be a Windows 10 issue (~internet.dll~ is
missing). I simply copied the file from /R-4.1.2/modules/x64/ to
/R-4.1.3/modules/x64/ and that fixed it.

[fn:4]And if you wish for the emphasis markers to appear when you
hover over an expression with the mouse, install the ~org-appear~
package and add this code to your ~.emacs~ file, too:
#+begin_example emacs-lisp
;; Show hidden emphasis markers
(use-package org-appear
  :hook (org-mode . org-appear-mode))
#+end_example

[fn:3]This was answered in the talk later. MS said that he had been
asked to analyze time series data sets containing no more than 3
months of data. Depending on the number of observations, this could
mean that the data set consists of 90 lines only, which is very small
indeed.

[fn:2]Somehow Schoology counts 14, not 13 participants.

[fn:1] Submission of the assignment by Monday 24 January 3pm gives 10
extra credit points.
