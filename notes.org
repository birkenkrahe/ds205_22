#+TITLE:DS Class Notes
#+AUTHOR:Marcus Birkenkrahe
#+SUBTITLE: Notes for CSC482/DSC205 Introduction to Advanced Data Science Spring 2022
#+STARTUP:overview hideblocks
#+OPTIONS: toc:nil num:nil ^:nil
* README

  Instead of bugging you with emails, I opt to summarize my course
  observations regarding content, process, in this file. These often
  contain additional links, articles, and musings.

  I usually update it after each class - it also contains the homework
  (if any). The first point of call for any questions should be the
  FAQ. There are two FAQs - a [[https://github.com/birkenkrahe/org/blob/master/FAQ.org#frequently-asked-questions][general one]] (for all my courses), and a
  [[https://github.com/birkenkrahe/cc100/blob/main/FAQ.org][FAQ for CSC 100]].

  You find the whiteboard photos [[https://drive.google.com/drive/folders/18w1MVUQpaNV650kM-h6W7FHHza7XREiM?usp=sharing][here in GDrive]].

  The companion file to this file, with the agenda and much of the
  course content, is the [[./agenda.org][agenda.org]] file.

* Course introduction  - w1s1 (01/12/22)

  See also: [[https://drive.google.com/file/d/1etLNSYGIkmw1lFksiOVkAW1HsPGageDC/view?usp=sharing][Google Meet chat]]

** Homework (until Tuesday, 18 Jan, 11:59 PM)

   | IF YOU DID NOT COMPLETE DSC101                  | IF YOU COMPLETED DSC101            |
   |-------------------------------------------------+------------------------------------|
   | Complete "Datascience for everyone" on DataCamp |                                    |
   | Complete "Introduction to R" on DataCamp        |                                    |
   | Pass the Entry Quiz (Schoology) > 50%           | Complete the Entry quiz (Schoology) |

** Stuff
*** Data science pipeline

    #+attr_html: :width 600px
    #+caption: Data science pipeline (Source: Wickham/Grolemund 2017)
    [[./img/pipeline.png]]

*** Books

    None of which will be an exclusive, but I may use stuff from these
    books. They're all good in their own way but a little hard on
    one's own.

    #+attr_html: :width 250px
    #+caption: Data Science at the Command Line by Jeroen Janssens
    [[./img/cmd.png]]

    #+attr_html: :width 250px
    #+caption: R for Data Science by Wickham/Grolemund
    [[./img/r4ds.png]]

    #+attr_html: :width 250px
    #+caption: Exploratory Data Science Using R by Ron Pearson
    [[./img/edar.png]]

*** Regular expressions

    Important for efficient text mining and string manipulation,
    e.g. when doing data science on the command line, [[https://en.wikipedia.org/wiki/Regular_expression][regexp]] are
    search patterns. Here is a [[https://regexone.com/][complete, free, online tutorial]]
    (RegexOne, 2021), and here is a [[https://nostarch.com/download/automate2e_SampleCh7.pdf][free book chapter]] explaining
    regexp as part of automating stuff with Python (Sweigart, 2019).

    Examples for such regular expressions are the ~*~ in an SQL
    command like ~SELECT * FROM t~ to query all columns of the table
    ~t~, or ~^x~ that matches any string starting with ~x~ etc.

    #+attr_html: :width 500px
    #+caption: Perl problems (Source: xkcd).
    [[./img/perl.png]]

    ~Perl~ from the cartoon title, is another powerful language whose
    strength is pattern matching and manipulation. It's more high
    level than ~awk~ or ~sed~ though and lives on all operating
    systems.

*** ~awk~ (and ~sed~)

    This is an "awkward" language on GNU/Linux. They're natural
    languages for regexp use. Makes data wrangling on the command line
    reall easy. Not hard to learn, and we might take a look at it - I
    plan to present it in another class (operating systems) as part of
    the Linux layout. [[https://www.tutorialspoint.com/awk/index.htm][Here's a tutorial]] for ~awk~, and an opinion
    piece (Hughes, 2015). Something else for a rainy afternoon.

    #+attr_html: :width 500px
    [[./img/sedawk.jpg]]

*** Getting started with GNU Emacs

    GNU Emacs is going to be our IDE and our environment for literate
    programming. This is an experiment that I'm running this term in
    all my courses - but this course (R) and the intro class on C/C++
    are the two classes where Emacs should really pay off.

    I suggested two short videos to get started while
    munching a bagel:
    * [[https://youtu.be/1YOrd7NCGkg][First Steps With Emacs]] (Eddelbuettel, 2021). This is especially
      for RStats people (like you), with a focus on ESS ('Emacs Speaks
      Statistics').
    * [[https://youtu.be/8HJGz3IYoHI][Literate programming demo]] (Birkenkrahe, 2022). Here I
      contrast Emacs Org-mode with an interactive shell using SQLite,
      an RDBMS.

    We'll get deeply into this soon as we set up our infrastructure.

*** Notebooks and notebook platforms

    There are many interactive notebooks and notebook platforms -
    they're especially popular in data science (and perhaps data
    science is so popular, and easier to learn because of them).

    Some examples: [[https://jupyter.org/][Jupyter]] (originally only for Python), Google
    [[https://colab.research.google.com/?utm_source=scs-index][Colaboratory]] (for Python and R - though with "magic" commands, one
    can use other languages, but it's not straightforward), and [[https://www.kaggle.com/][Kaggle]]
    (owned by Google). Kaggle serves notebooks, datasets and (most
    importantly) data science competitions (strong focus on machine
    learning). These are often quite ideological ("Save the whales
    with data science") but what isn't these days? Which is why data
    science needs strong bias monitoring[fn:1].

* Installing R / Windows PATH - w1s2 (01/14/22)
** R

   | TO DO                     | WINDOWS                            |
   |---------------------------+------------------------------------|
   | Download base R from [[https://cran.r-project.org/][CRAN]] | R 4.1.2 "base"                     |
   | Run installer             |                                    |
   | Check files               | [[file:c:/Program Files/R][C:/Program Files/R]]                 |
   | Go to the binary folder   | [[file:c:/Program Files/R/R-4.1.2/bin/x64][c:/Program Files/R/R-4.1.2/bin/x64]] |
   | Open R GUI                | Rgui.exe                           |
   | Open R terminal           | Rterm.exe                          |
   | Check Rscript             | Rscript test.R                     |
   | Check PATH                |                                    |

** Log

   * Short rant about Python vs R and why you learn R ([[https://blog.ephorie.de/why-r-for-data-science-and-not-python][vonjd]])
   * Showed R console and Rscript [[https://campus.datacamp.com/courses/free-introduction-to-r/chapter-1-intro-to-basics-1?ex=1][in DataCamp]]
   * Showed R in a Windows (CMD) terminal
   * Showed R inside Emacs in a terminal (no syntax highlighting)
   * At CRAN, we want "[[https://www.r-project.org/about.html][base R]]" (without [[https://cran.r-project.org/web/packages/available_packages_by_date.html][packages]])
   * The current version of R (Jan'22) is 4.1.2 "Bird Hippie"
   * Normally, before running executables: check the "[[https://www.howtogeek.com/363735/what-is-a-checksum-and-why-should-you-care/][checksum]]"
     (Hoffman,2019)
   * Run the installer, accept standard suggestions
   * Start the launcher from the desktop
   * GUI appears (~Rgui.exe~)
   * Saving the workspace image stores ~.RData~, ~.Rhistory~, and
     ~.Rplots~ files containing (binary) data, command history, and
     PDF plots, respectively
   * Update the ~PATH~ variable (search for PATH) using the string
     from the file explorer that contains the path to ~bin/~
   * Apparently, you don't have to do this in Windows 11 (but don't
     rely on it - better find out how to drive with stick shift!)
   * Open a Windows terminal ("CMD")
   * Start R (enter R)
   * Test R with some commands like in the [[Rtest]] code block.

   #+name: Rtest
   #+begin_example
     plot(rnorm(100))
     3 + 4
     x <- rnorm(100)
     str(x)
     plot(x)
     q()     # you can save your workspace image (don't)
   #+end_example

   * If you have any installation issues: check the [[https://cran.r-project.org/faqs.html][R FAQ]] first

* Installing and setting up GNU Emacs - w2s3 (01/19/22)
** Emacs+ESS

   | TO DO                  | WINDOWS                                    |
   |------------------------+--------------------------------------------|
   | Download Emacs+ESS     | [[https://vigou3.gitlab.io/emacs-modified-windows/][Download Installer]]                         |
   | Run installer          | Standard config                            |
   |                        | Desktop shortcut                           |
   | Check README           | /Opens after installation/                 |
   | Check Emacs            | ~emacs -nw~ in terminal / desktop shortcut |
   | Set PATH               | /requires admin privileges/                |

** Log

   * If you don't have the modified GNU Emacs (with ESS already
     installed), you need to install and load the ~ess~ package

   * See [[https://github.com/birkenkrahe/org/blob/master/emacs/install.org][install.org]] (+ [[https://github.com/birkenkrahe/org/blob/master/emacs/install.pdf][PDF]]) in the org/emacs GitHub repo for
     installation instructions if you want to put this on your own PC

   * GNU Emacs layout: buffer window + modeline + minibuffer

   * Commands begin with C-x (CTRL+x) or M-x (ALT+x)

   * C-g interrupts any process

   * List of open buffers: C-x C-b

   * Change to other buffer: C-x o

   * Close all visible buffers except one: C-x 1

   * Start R (if installed and PATH set correctly): M-x R

   * This opens an R session in the current directory (iESS mode)

* Understanding Emacs Org-mode - w2s4 (01/21/22)

  This class will get the most intense exposure and training for GNU
  Emacs, because of the need to work with interactive notebooks in
  data science. Getting to play around in Emacs in other courses
  (Databases, Operating Systems) will only improve your editor skills.

  What we did using the instructions from [[https://github.com/birkenkrahe/org/blob/master/emacs/tutor.org][tutor.org]]:

  * Downloaded GitHub directory with ~.org~ files

  * Opened ~.org~ files permanently with GNU Emacs

  * We covered:
    - header options in Org-mode
    - moving around in Emacs buffers
    - opening/closing/suspending Emacs (also from the cmd line)
    - reading a file into Emacs, and saving it
    - opening buffer list and directory
    - switching buffers
    - creating a region, killing and yanking it
    - changing the font
    - opening the onboard tutorial
    - aborting commands

  * We'll rehearse these in our weekly quiz on Monday!

  * To get better, work through the tutorial (C-h t)

    See also the article "[[https://opensource.com/article/20/3/getting-started-emacs][Getting started with Emacs"]] (Kenlon, 2020),
    and the video "[[https://youtu.be/48JlgiBpw_I][The Absolute Beginner's Guide to Emacs]]" (System
    Crafters, 2020) with [[https://github.com/birkenkrahe/org/blob/master/emacs/emacs_beginner.org][my notes]].

* Customizing Emacs (init file) - w3s5 (01/24/22)

  Planned:
  |---------------------------+-------------------------------------------------------|
  | Practice                  | GNU Emacs Tutorial cont'd ([[https://github.com/birkenkrahe/org/blob/master/emacs/tutor.org][tutor.org]])                 |
  | - Package manager         | ~M-x package-list-packages RET~                       |
  | - Start R shell in Emacs  | ~M-x R~ (R must be installed & in the ~PATH~)         |
  | - Add init file           | .emacs sample file ([[https://github.com/birkenkrahe/org/blob/master/emacs/.emacs][GitHub]])                           |
  | - Create ~first.org~ file | ~C-x C-f ob.org RET~                                  |
  | - Create R code block     | ~#+begin_src R :session :results output ...#+end_src~ |
  | - Run R code block        | ~C-c C-c~                                             |
  |---------------------------+-------------------------------------------------------|

** Captain's Log

   See [[https://github.com/birkenkrahe/org/blob/master/emacs/tutor.org][tutor.org]] for details:

   * We added .emacs file in the ~/ HOME directory and discussed its
     content and structure (Emacs-Lisp) - especially the Org-babel packages.

   * We talked about the Org-mode file [[https://lyon.schoology.com/assignment/5590410225][assignment]].

   * After restarting Emacs (to load the configuration file), we opened
     the package manager with ~M-x package-list-packages~. If the
     ~.emacs~ file is in the right location, the package manager should
     refresh its content.

   * The package manager lists many downloadable packages. You
     downloaded the ~org-beautify-theme~ and ~org-bullet~ - both
     packages to improve the appearance of Emacs.

   * Here is the Emacs documentation on the initialization file
     ~.emacs~ in the GNU Emacs manual: "[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Find-Init.html][How Emacs finds your init
     file]]".

   * By default, Emacs will open to ~default-directory~. This is a
     variable that you can set in your ~.emacs~ file. Here is an
     example where the working directory is set to
     ~C:\Users\birkenkrahe\Emacs~

   #+begin_src emacs-lisp
     (setq default-directory "c:/Users/birkenkrahe/Emacs")
   #+end_src

   Notice how Windows requires backslashes, while Emacs (and
   Unix/Linux) use forward slashes.

* Running code in Org-mode 1 - w3s6 (01/26/22)

  * When you look at an Org file as a PDF or on GitHub, you will not
    see the meta data starting with ~#+~. Org-mode files are meant to
    be edited/viewed in Emacs.

  * The code block header has the following arguments:

  | HEADER ARGUMENT      | MEANING                                                |
  |----------------------+--------------------------------------------------------|
  | ~:session *R*~       | Run R in a session in the Emacs buffer ~*R*~           |
  | ~:results output~    | insert output directly in the org file                 |
  | ~:tangle first.R~    | export source code as R file ~first.R~  ("tangle")     |
  | ~:exports both~      | both result and source code will be exported           |
  | ~:comments both~     | link source code and org files, add comments to source |

* Running code in Org-mode 2 - w3s7 (01/28/22)

  * Feel free to bring your own laptop to future sessions. If you want
    me to check installation because something did not work, come a
    little earlier or stay a little later.

  * This concludes our "Emacs week". To get more practice in GNU
    Emacs, complete the onboard tutorial (~C-h t~), and of course
    there's still one (simple, text-only) [[https://lyon.schoology.com/assignment/5590410225/info][Org-mode assignment]]
    outstanding.

  * Solutions to the Org-mode assignment are posted [[https://github.com/birkenkrahe/ds205/tree/main/assignments/org-mode/solutions][here on
    GitHub]]. Note that submissions of programs as Org-mode files should
    always also be accompanied by references and sources.

  * I told you an inaccuracy in class: when rendering the Org-mode
    file on GitHub, the ~#+TITLE~ meta information is displayed as the
    title of the file. If no such header is present, only the ~README~
    file is displayed (with the file name as title).

* Org-mode lab session - w4s8 (01/31/22)

  * Setting the default directory (the folder where Emacs "wakes up"
    when you open Dired with ~C-x d~):
    #+begin_src emacs-lisp
      ;; set default working directory to c:/Documents/GitHub/
      (setq default-directory "c:\\Users\\birkenkrahe\\Documents\\GitHub\\")
    #+end_src

* 2022 Data Trends - w4s9 (02/02/22)
** Notes from the DataCamp webinar ([[datacamp][DataCamp, 2022]])
*** Overview

    * Great acceleration (2020) - reaction

    * Great transition (2021) - recognition

      #+caption: Prediction check 2021-2022
      #+attr_html: :width 500px
      [[./img/trends.png]]

      | "Jupyter ecosystem"?    |
      | "Augmented analytics"?  |

    * Operationalization of large language models: dashboards

    * "Innovations in the data tooling stack" (more and better tools)

*** Trends

    1. 100-fold increase prediction in data generated (2021-2025)
       according to Accenture

    2. Data mesh vs data lake - Data PaaS - the issue is speed
       (infrastructure is complex and slow-moving)

    3. MLOps mature - report: mostly startups (= economically
       irrelevant)

    4. Data tool stack grows

    5. Learning & Development - "upskilling becomes a
       mandate". Cotton: "People on this call are weird. Most people
       do not voluntarily join a webinar on data trends." Hairdresser
       asked him about his job..."does this mean that you work with
       computers and stuff." The knowledge divide is huge.

    6. Data governance and quality
       - data *catalog*
       - data *observability* (freshness)

       Documentation aids analysis (compare with Andrew Ng's
       initiative for more data tools and transparency). Independence
       of technical skill (no-coders).

    7. NLP - e.g. PowerBI allows NLP descriptions of something you
       want to calculate, and it will auto-generate code/graphs for
       you. OpenAI: Codex allows for Python-from-description coding.

       Reverse: replit.com - don't have to read code anymore because
       the platform explains it to you.

    8. Culture focus shift intensifies

    9. Talent pool and talent generation will expand

** Discussion / Groupwork results

   #+caption: data trend scenarios
   #+attr_html: :width 600px
   [[./img/scenarios.jpg]]

* Studying with DataCamp - w5s10 (02/07/22)

  * Simplify your Org-mode setup with ~PROPERTY~ settings
    - Add this at the top of your Org-mode file with code:
    #+begin_example
      #+PROPERTY: header-args:R :session
      #+PROPERTY: header-args:R :results output
    #+end_example
    Restart the file or refresh with ~C-c C-c~ on the ~PROPERTY~ line,
    and now a code chunk like this should work fine:
    #+begin_src R
      str(mtcars)
    #+end_src
    Try it now! ([[https://www.gnu.org/software/emacs/manual/html_node/org/Using-Header-Arguments.html][Documentation]])

  * Type the DataCamp exercises out as Org-mode files to get
    practice - both in Emacs Org-mode, but also in R ([[file:~/GitHub/admin/spring22/ds205/datacamp.org::While loop][example]])


** The Anti-IF Campaign

   You may have been mystified by my mentioning Cirillo and the
   Pomodoro time management technique but also IF-THEN-ELSE as a
   No-No in software engineering. This last issue was related to the
   "[[https://francescocirillo.com/products/the-anti-if-campaign][Anti-IF Campaign]]" launched (not tongue-in-cheek) by my friend
   Francesco Cirillo of Berlin ([[cirillo][Cirillo, 2022]]):

   #+begin_quote
   "The Campaign is against the use of the IF statement as a regular
   design strategy to deal with growth, change and complexity ("Let's
   Put an IF Syndrome") in an evolutionary context. Despite being an
   "easy," and apparently effective, way of delivering the value
   requested by the customer, this "design strategy" has negative
   repercussions when applied regularly as the main strategy to deal
   with change, growth and complexity. By applying the "IF Strategy"
   in an evolutionary context, software systems becomes more complex
   to be read, tested, even debugged. It becomes easier to duplicate
   code, accumulate technical debt and spend more time fixing
   bugs. In the result, the software system become more complex. New
   features and changes will cost more and more."
   #+end_quote.

* Installing packages, using index vectors - w5s11 (02/09/22)

  * Under Windows, when trying to install a package with
    ~install.packages()~, you're prompted for a CRAN mirror to use.

  * Put the following lines into a file ~.Rprofile~ in your ~$HOME~
    directory to avoid having to answer this question every time:
    #+begin_example
    options(repos = c("https://cloud.r-project.org/"))
    #+end_example
    The installation of packages from within Emacs should also work
    now. The screenshot shows an example (Emacs 27.2 under Windows
    10).
    #+caption: R package "dslabs" installed in Org-mode file
    #+attr_html: :width 500px
    [[./img/rprofile.png]]

* Reviewing test 1, xkcd, plots - w6s14 (02/16/22)

  * "p-hacking" refers to the practice of reanalyzing data in order to
    get a predetermined, desired result that confirms ones bias. More
    specifically, it is a misuse of the p-value, which is a measure
    for statistical relevance (however not for practical relevance). A
    small p-value corresponds to a greater chance that the observed
    results are not just due to random effects. For a critical
    discussion, see e.g. [[https://statisticalbullshit.com/2017/07/17/p-hacking/][Statistical Bullshit (2017)]].

  * I dropped those DataCamp assignments that dealt with the
    "Tidyverse", a bundle of packages including the popular ~dplyr~
    package. In my view, the TidyVerse is not suited for
    beginners ([[matloff][Matloff, 2020]]). However, if you have time, it would probably be useful
    to take a look at the DataCamp course (it's not difficult).

  * ~ggplot2~ is a very popular graphics package, especially for
    creating pretty graphs. It is distributed with the "Tidyverse",
    which it predates by several years however. We will take a look at
    ~ggplot2~ in the course, in preparation for the [[https://app.datacamp.com/learn/courses/exploratory-data-analysis-in-r][EDA in R DataCamp
    course]].

* Guest talk - Stone Ward - w6s15 (02/18/22)

  * Ask Matthew Stewart for examples of the code he collects - a high
    end and a low end example. Also, ask about RStudio vs. Emacs vs. R
    console as his working environment[fn:2].

    #+caption: dialog with Matthew Steward (22-23 Feb 2022)
    #_attr_html: :width 600px
    [[./img/stoneward.png]]

  * I discovered this free toolkit to connect Excel and R,
    [[https://bert-toolkit.com/][BERT]]. Confusingly, it is named like Google's AI algorithm, the
    "[[https://cloud.google.com/ai-platform/training/docs/algorithms/bert-start][Bidirectional Encoder Representations from Transformers]]" with
    whom it has nothing to do.

  * Matthew commented further re: Excel prowess required at Stone Ward:
    #+begin_quote
    "For excel, if students can make a pivot table, use sumif, xlookup, and
    make a chart quickly then they're in a good spot with the program."
    #+end_quote

  * I had another exchange on Excel with Lyon Prof of Exercise
    Science, Matthew Peterson. He asked:
    #+begin_quote
    "During the data science talk yesterday, you mentioned that Excel
    was error prone.  As someone who uses Excel quite a bit, this
    caught my attention.  Would you mind expanding on that point for
    me?"
    #+end_quote
    I answered his question in some detail:
    #+begin_quote
    Good morning, Matthew - Sure, no problem. Here is a series of more
    or less famous cases: "[[https://www.teampay.co/insights/biggest-excel-mistakes-of-all-time/][The 7 Biggest Excel Mistakes of All Time]]"
    (teampay, 2022).

    Here is a more high profile case that I often discuss with my
    students. Though at Lyon, unless they are business students, they
    won't be able to appreciate it as much perhaps: "[[https://theconversation.com/the-reinhart-rogoff-error-or-how-not-to-excel-at-economics-13646][The
    Reinhart-Rogoff error - or how not to Excel at economics]]"
    (Borwein/Bailey, 2013).

    My main point here re: Excel - 1) find alternatives (esp. for
    visualization, R is great and really much easier to learn than
    Excel) 2) check all results using original data (or probes) if you
    can. (2) can lead to sudden fame - one of them could be the next
    [[https://en.wikipedia.org/wiki/Thomas_Herndon][Thomas Herndon]]!

    At the conceptual level, Excel does what most other dashboard apps
    do, too - hide the inner workings from the user. Obviously, we
    need some level of abstraction to use computers at all, but for
    scientific purposes, this is not appropriate (and also not for
    research-based teaching and learning). Which is why, in my
    classes, it "foundations above all", mixed with the latest
    research. The students take to the foundations easily enough once
    they have taken leave of the drag-and-drop paradigm and acquainted
    themselves with the command line, but they have difficulty with
    research because, alas, they have not learnt how to read. I try to
    address this in my classes (see my FAQ here - "How should you
    read?").

    In fact, this is likely going to be one of my points for my April
    lecture! You may recognize the thought there...sorry to be boring
    then already :-)

    Thanks for attending and for asking! Cheers, Marcus
    #+end_quote

  * FAQ: Animations - including GIFs - cannot be rendered inside Emacs, I
    believe, (you can see open devices in R with ~dev.list()~). Those
    are devices outside of Emacs run by the windows manager. Also, I
    might do gganimate now or I might leave it for the DataViz course
    next term. Simply because it isn't all that important. Most data
    are difficult enough to understand without animation, and the
    added value is often not there. It's a superficial pleasure to see
    things moving (the eye likes it - but visualization is only
    superficially for the eye). There are exceptions but one needs to
    check in each case if running images add value.

* Change R download repo - w8s18 + 19 (7 Mar)

  Device control is quite important in all graphical program. In R,
  there are multiple functions that achieve this - look up
  ~help(dev.list)~ for the documentation, especially
  ~example(dev.list)~ (examples at the end of the help file).

  Even though the [[eXample]] is supposedly Unix-specific, it runs under
  Windows, too. ~x11~ is the windows manager. In the example, a series
  of devices is opened, used, and finally closed again.

  #+name: eXample
  #+begin_src R :exports both :session :results output
    x11()
    plot(1:10)
    x11()
    plot(rnorm(10))
    dev.set(dev.prev())
    abline(0, 1) # through the 1:10 points
    dev.set(dev.next())
    abline(h = 0, col = "gray") # for the residual plot
    dev.set(dev.prev())
    dev.off(); dev.off() #- close the two X devices
  #+end_src

  #+RESULTS:
  #+begin_example
  windows
        2
  windows
        3
  windows
        2
  windows
        3
  null device
            1
  #+end_example

* References
  * Birkenkrahe (Jan 11, 2022). Interactive shell vs. interactive
    notebook (literate programming demo). [[https://youtu.be/8HJGz3IYoHI][URL: youtu.be/8HJGz3IYoHI]].
  * Borwein/Bailey (April 22, 2013). The Reinhart-Rogoff error – or
    how not to Excel at economics [article]. URL: theconversation.com
  * <<datacamp>> DataCamp (January 2022). Data Trends and Predictions
    2022 [webinar]. [[https://www.datacamp.com/resources/webinars/webinar-2022-data-trends-and-predictions-1][URL: www.datacamp.com.]]
  * <<cirillo>> Cirillo (2022). The Anti-IF Campaign [website}. [[https://francescocirillo.com/products/the-anti-if-campaign][URL:
    francescocirillo.com]].
  * Emacs Speaks Statistics (Mar 19, 2021). First Steps With Emacs
    [video]. [[https://youtu.be/1YOrd7NCGkg][URL: youtu.be/1YOrd7NCGkg]].
  * Hoffman (Sep 30, 2019). What is a checksum (and why should you
    care)? [blog]. [[https://www.howtogeek.com/363735/what-is-a-checksum-and-why-should-you-care/][URL: www.howtogeek.com.]]
  * Hughes (Oct 30, 2015). Every Linux Geek Needs To Know Sed and
    Awk. Here's Why...[blog]. [[https://www.makeuseof.com/tag/sed-awk-learn/][URL: www.makeuseof.com]].
  * Kenlon (March 10, 2020). Getting started with Emacs [blog]. [[https://opensource.com/article/20/3/getting-started-emacs][URL:
    opensource.com.]]
  * <<matloff>> Matloff (2020). Tidyverse Sceptic - An opinionated
    view of the Tidyverse "dialect" of the R language. [[https://github.com/matloff/TidyverseSkeptic][URL:
    github.com]].
  * Pearson (2019). Exploratory Data Analysis Using R. CRC Press. [[https://www.routledge.com/Exploratory-Data-Analysis-Using-R/Pearson/p/book/9780367571566][URL:
    routledge.com]].
  * RegexOne (2021). Lesson 1: An Introduction, and the ABCs
    [tutorial]. [[https://regexone.com/][URL: regexone.com]].
  * Sweigart (2019). Automating the boring stuff with
    Python. NoStarch. [[https://nostarch.com/automatestuff2][URL: nostarch.com/automatestuff2]].
  * System Crafters (March 8, 2021). The Absolute Beginner's Guide to
    Emacs [video]. [[https://youtu.be/48JlgiBpw_I][URL: youtu.be/48JlgiBpw_I]].
  * teampay (2022). The 7 Biggest Excel Mistakes of All Time
    [blog]. URL: teampay.co.
  * vonjd (n.d). Why R for Data Science – and /Not/ Python!
    [blog]. [[https://blog.ephorie.de/why-r-for-data-science-and-not-python][URL: blog.ephorie.de.]]
  * Wickham/Grolemund (2017). R for Data Science. O'Reilly. [[https://r4ds.had.co.nz/][URL:
    r4ds.had.co.nz.]]
  * xkcd (n.d.). Perl Problems [cartoon]. [[https://xkcd.com/1171/][URL: xkcd.com]].

* Footnotes

[fn:2]As a graduate of the Google certificate course, he is likely to
be an RStudio user.

[fn:1]Who wouldn't want to save the whales! Still, even a seeminly
harmless ideological thrust can lead to conflict. E.g. what if you
only have enough project budget to either save the whales or starving
children? That used to be a question for philosophy class - in data
science, it's everybody's task - because data science is decision
science.
