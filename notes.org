#+TITLE:Followup
#+AUTHOR:Marcus Birkenkrahe
#+SUBTITLE:Followup for CSC330 Database Theory & Applications Spring 2022
#+STARTUP:overview hideblocks
#+OPTIONS: toc:nil num:nil ^:nil
* What is this?

  Instead of bugging you with emails, I opt to summarize my course
  observations regarding content, process, in this file. These often
  contain additional links, articles, and musings.

  I usually update it after each class - it also contains the homework
  (if any). The first point of call for any questions should be the
  FAQ. There are two FAQs - a [[https://github.com/birkenkrahe/org/blob/master/FAQ.org#frequently-asked-questions][general one]] (for all my courses), and a
  [[https://github.com/birkenkrahe/cc100/blob/main/FAQ.org][FAQ for CSC 100]].

  You find the whiteboard photos [[https://drive.google.com/drive/folders/18w1MVUQpaNV650kM-h6W7FHHza7XREiM?usp=sharing][here in GDrive]].
  
* w1s1 (01/12/22)

  See also: [[https://drive.google.com/file/d/1etLNSYGIkmw1lFksiOVkAW1HsPGageDC/view?usp=sharing][Google Meet chat]]

** Homework (until Tuesday, 18 Jan, 11:59 PM)

   | IF YOU DID NOT COMPLETE DSC101                  | IF YOU COMPLETED DSC101            |
   |-------------------------------------------------+------------------------------------|
   | Complete "Datascience for everyone" on DataCamp |                                    |
   | Complete "Introduction to R" on DataCamp        |                                    |
   | Pass the Entry Quiz (Schoology) > 50%           | Complete the Entry quiz (Schoology) |

** Stuff
*** Data science pipeline

    #+attr_html: :width 600px
    #+caption: Data science pipeline (Source: Wickham/Grolemund 2017)
    [[./img/pipeline.png]]
    
*** Books

    None of which will be an exclusive, but I may use stuff from these
    books. They're all good in their own way but a little hard on
    one's own.

    #+attr_html: :width 250px
    #+caption: Data Science at the Command Line by Jeroen Janssens
    [[./img/cmd.png]]

    #+attr_html: :width 250px
    #+caption: R for Data Science by Wickham/Grolemund
    [[./img/r4ds.png]]

    #+attr_html: :width 250px
    #+caption: Exploratory Data Science Using R by Ron Pearson
    [[./img/edar.png]]

*** Regular expressions

    Important for efficient text mining and string manipulation,
    e.g. when doing data science on the command line, [[https://en.wikipedia.org/wiki/Regular_expression][regexp]] are
    search patterns. Here is a [[https://regexone.com/][complete, free, online tutorial]]
    (RegexOne, 2021), and here is a [[https://nostarch.com/download/automate2e_SampleCh7.pdf][free book chapter]] explaining
    regexp as part of automating stuff with Python (Sweigart, 2019).

    Examples for such regular expressions are the ~*~ in an SQL
    command like ~SELECT * FROM t~ to query all columns of the table
    ~t~, or ~^x~ that matches any string starting with ~x~ etc.

    #+attr_html: :width 500px
    #+caption: Perl problems (Source: xkcd).
    [[./img/perl.png]]

    ~Perl~ from the cartoon title, is another powerful language whose
    strength is pattern matching and manipulation. It's more high
    level than ~awk~ or ~sed~ though and lives on all operating
    systems.
    
*** ~awk~ (and ~sed~)

    This is an "awkward" language on GNU/Linux. They're natural
    languages for regexp use. Makes data wrangling on the command line
    reall easy. Not hard to learn, and we might take a look at it - I
    plan to present it in another class (operating systems) as part of
    the Linux layout. [[https://www.tutorialspoint.com/awk/index.htm][Here's a tutorial]] for ~awk~, and an opinion
    piece (Hughes, 2015). Something else for a rainy afternoon.

    #+attr_html: :width 500px
    [[./img/sedawk.jpg]]
    
*** Getting started with GNU Emacs

    GNU Emacs is going to be our IDE and our environment for literate
    programming. This is an experiment that I'm running this term in
    all my courses - but this course (R) and the intro class on C/C++
    are the two classes where Emacs should really pay off.

    I suggested two short videos to get started while
    munching a bagel:
    * [[https://youtu.be/1YOrd7NCGkg][First Steps With Emacs]] (Eddelbuettel, 2021). This is especially
      for RStats people (like you), with a focus on ESS ('Emacs Speaks
      Statistics').
    * [[https://youtu.be/8HJGz3IYoHI][Literate programming demo]] (Birkenkrahe, 2022). Here I
      contrast Emacs Org-mode with an interactive shell using SQLite,
      an RDBMS.

    We'll get deeply into this soon as we set up our infrastructure.
    
*** Notebooks and notebook platforms

    There are many interactive notebooks and notebook platforms -
    they're especially popular in data science (and perhaps data
    science is so popular, and easier to learn because of them).

    Some examples: [[https://jupyter.org/][Jupyter]] (originally only for Python), Google
    [[https://colab.research.google.com/?utm_source=scs-index][Colaboratory]] (for Python and R - though with "magic" commands, one
    can use other languages, but it's not straightforward), and [[https://www.kaggle.com/][Kaggle]]
    (owned by Google). Kaggle serves notebooks, datasets and (most
    importantly) data science competitions (strong focus on machine
    learning). These are often quite ideological ("Save the whales
    with data science") but what isn't these days? Which is why data
    science needs strong bias monitoring[fn:1].
    
* w1s2 (01/14/22)
** R

   | TO DO                     | WINDOWS                            |
   |---------------------------+------------------------------------|
   | Download base R from [[https://cran.r-project.org/][CRAN]] | R 4.1.2 "base"                     |
   | Run installer             |                                    |
   | Check files               | [[file:c:/Program Files/R][C:/Program Files/R]]                 |
   | Go to the binary folder   | [[file:c:/Program Files/R/R-4.1.2/bin/x64][c:/Program Files/R/R-4.1.2/bin/x64]] |
   | Open R GUI                | Rgui.exe                           |
   | Open R terminal           | Rterm.exe                          |
   | Check Rscript             | Rscript test.R                     |
   | Check PATH                |                                    |

** Log

   * Short rant about Python vs R and why you learn R ([[https://blog.ephorie.de/why-r-for-data-science-and-not-python][vonjd]])
   * Showed R console and Rscript [[https://campus.datacamp.com/courses/free-introduction-to-r/chapter-1-intro-to-basics-1?ex=1][in DataCamp]]
   * Showed R in a Windows (CMD) terminal
   * Showed R inside Emacs in a terminal (no syntax highlighting)
   * At CRAN, we want "[[https://www.r-project.org/about.html][base R]]" (without [[https://cran.r-project.org/web/packages/available_packages_by_date.html][packages]])
   * The current version of R (Jan'22) is 4.1.2 "Bird Hippie"
   * Normally, before running executables: check the "[[https://www.howtogeek.com/363735/what-is-a-checksum-and-why-should-you-care/][checksum]]"
     (Hoffman,2019)
   * Run the installer, accept standard suggestions
   * Start the launcher from the desktop
   * GUI appears (~Rgui.exe~)
   * Saving the workspace image stores ~.RData~, ~.Rhistory~, and
     ~.Rplots~ files containing (binary) data, command history, and
     PDF plots, respectively
   * Update the ~PATH~ variable (search for PATH) using the string
     from the file explorer that contains the path to ~bin/~
   * Apparently, you don't have to do this in Windows 11 (but don't
     rely on it - better find out how to drive with stick shift!)
   * Open a Windows terminal ("CMD")
   * Start R (enter R)
   * Test R with some commands like in the [[Rtest]] code block.

   #+name: Rtest
   #+begin_src R :session :results output :exports both
    plot(rnorm(100))
    3 + 4
    x <- rnorm(100)
    str(x) 
    plot(x)
    q()     # you can save your workspace image (don't)
   #+end_src

   * If you have any installation issues: check the [[https://cran.r-project.org/faqs.html][R FAQ]] first

* w2s3 (01/19/22)
** Emacs+ESS

   | TO DO                  | WINDOWS                                    |
   |------------------------+--------------------------------------------|
   | Download Emacs+ESS     | [[https://vigou3.gitlab.io/emacs-modified-windows/][Download Installer]]                         |
   | Run installer          | Standard config                            |
   |                        | Desktop shortcut                           |
   | Check README           | /Opens after installation/                 |
   | Check Emacs            | ~emacs -nw~ in terminal / desktop shortcut |
   | Set PATH               | /requires admin privileges/                |

** Log

   * If you don't have the modified GNU Emacs (with ESS already
     installed), you need to install and load the ~ess~ package

   * See [[https://github.com/birkenkrahe/org/blob/master/emacs/install.org][install.org]] (+ [[https://github.com/birkenkrahe/org/blob/master/emacs/install.pdf][PDF]]) in the org/emacs GitHub repo for
     installation instructions if you want to put this on your own PC

   * GNU Emacs layout: buffer window + modeline + minibuffer

   * Commands begin with C-x (CTRL+x) or M-x (ALT+x)

   * C-g interrupts any process

   * List of open buffers: C-x C-b

   * Change to other buffer: C-x o

   * Close all visible buffers except one: C-x 1

   * Start R (if installed and PATH set correctly): M-x R

   * This opens an R session in the current directory (iESS mode)

* w2s4 (01/21/22)

  This class will get the most intense exposure and training for GNU
  Emacs, because of the need to work with interactive notebooks in
  data science. Getting to play around in Emacs in other courses
  (Databases, Operating Systems) will only improve your editor skills.

  What we did using the instructions from [[https://github.com/birkenkrahe/org/blob/master/emacs/tutor.org][tutor.org]]:
  
  * Downloaded GitHub directory with ~.org~ files

  * Opened ~.org~ files permanently with GNU Emacs

  * We covered:
    - header options in Org-mode
    - moving around in Emacs buffers
    - opening/closing/suspending Emacs (also from the cmd line)
    - reading a file into Emacs, and saving it
    - opening buffer list and directory
    - switching buffers
    - creating a region, killing and yanking it
    - changing the font
    - opening the onboard tutorial
    - aborting commands

  * We'll rehearse these in our weekly quiz on Monday!

  * To get better, work through the tutorial (C-h t)

   See also the article "[[https://opensource.com/article/20/3/getting-started-emacs][Getting started with Emacs"]] (Kenlon, 2020),
   and the video "[[https://youtu.be/48JlgiBpw_I][The Absolute Beginner's Guide to Emacs]]" (System
   Crafters, 2020) with [[https://github.com/birkenkrahe/org/blob/master/emacs/emacs_beginner.org][my notes]].

* TODO w3s5 (01/24/22)

* References

  * Birkenkrahe (Jan 11, 2022). Interactive shell vs. interactive
    notebook (literate programming demo). [[https://youtu.be/8HJGz3IYoHI][URL: youtu.be/8HJGz3IYoHI]].
  * Emacs Speaks Statistics (Mar 19, 2021). First Steps With Emacs
    [video]. [[https://youtu.be/1YOrd7NCGkg][URL: youtu.be/1YOrd7NCGkg]].
  * Hoffman (Sep 30, 2019). What is a checksum (and why should you
    care)? [blog]. [[https://www.howtogeek.com/363735/what-is-a-checksum-and-why-should-you-care/][URL: www.howtogeek.com.]]
  * Hughes (Oct 30, 2015). Every Linux Geek Needs To Know Sed and
    Awk. Here's Why...[blog]. [[https://www.makeuseof.com/tag/sed-awk-learn/][URL: www.makeuseof.com]].
  * Kenlon (March 10, 2020). Getting started with Emacs [blog]. [[https://opensource.com/article/20/3/getting-started-emacs][URL:
    opensource.com.]]
  * Pearson (2019). Exploratory Data Analysis Using R. CRC Press. [[https://www.routledge.com/Exploratory-Data-Analysis-Using-R/Pearson/p/book/9780367571566][URL:
    routledge.com]].
  * RegexOne (2021). Lesson 1: An Introduction, and the ABCs
    [tutorial]. [[https://regexone.com/][URL: regexone.com]].
  * Sweigart (2019). Automating the boring stuff with
    Python. NoStarch. [[https://nostarch.com/automatestuff2][URL: nostarch.com/automatestuff2]].
  * System Crafters (March 8, 2021). The Absolute Beginner's Guide to
    Emacs [video]. [[https://youtu.be/48JlgiBpw_I][URL: youtu.be/48JlgiBpw_I]].
  * vonjd (n.d). Why R for Data Science – and /Not/ Python!
    [blog]. [[https://blog.ephorie.de/why-r-for-data-science-and-not-python][URL: blog.ephorie.de.]]
  * Wickham/Grolemund (2017). R for Data Science. O'Reilly. [[https://r4ds.had.co.nz/][URL:
    r4ds.had.co.nz.]]
  * xkcd (n.d.). Perl Problems [cartoon]. [[https://xkcd.com/1171/][URL: xkcd.com]].
  
* Footnotes

[fn:1]Who wouldn't want to save the whales! Still, even a seeminly
harmless ideological thrust can lead to conflict. E.g. what if you
only have enough project budget to either save the whales or starving
children? That used to be a question for philosophy class - in data
science, it's everybody's task - because data science is decision
science.
