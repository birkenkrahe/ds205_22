#+TITLE:2nd Org-Mode Coding Practice
#+AUTHOR:2nd Org-Mode Coding Assignment
#+SUBTITLE:DS 205 - introduction to advanced data science
#+STARTUP:overview hideblocks
#+OPTIONS: toc:nil num:nil ^:nil

This is an ungraded assignment for you test your Emacs mettle. If you
don't succeed, check out [[https://youtube.com/playlist?list=PLwgb17bzeNygo8GU6SivwwjsQj9QabqAJ][the video tutorials]], and if you cannot fix it
after that, contact me.

* Create working directory and file

  * Open Emacs (you must load [[https://github.com/birkenkrahe/org/blob/master/emacs/.emacs][the Lyon ~.emacs~ file]])

  * Create a new directory named ~org-mode-2~ in the folder
    ~c:/Users/[name]~ (replace ~[name]~ by your own user name)[fn:3]

  * Create an Org-mode file called ~second.org~

* Header information

  Add the following meta information in the file header:

  | Title   | My second Org-mode file |
  | Author  | [Your own name]         |
  | Options | ~toc:nil~               |
  | Startup | ~overview hideblocks~   |

  The last two lines mean that no table of contents will be
  produced, and that, when the file is first opened, all headlines
  and code blocks will be folded[fn:1].

* Add headlines

  Add three headlines
  - 1st order headline with the content ~My second Org-mode file~
  - 2nd order headline with the content ~My second R code block~
  - 1st order headline with the content ~References~

* Add code block

  Add a C code block below the 2nd order headline. You can expand the
  predefined expression ~<s~ with ~TAB~. You can use the following
  text (or write your own) before the code block:

  #+begin_example
    The following code block creates a scatter plot of 100 random
    numbers and prints the plot as a PNG file, which is stored in your
    home directory.
  #+end_example

  Remember that you can indent with ~C-M-\~ and wrap text with ~M-q~.

** Code block header

   The code block should have the following header information:

   * start a named R session with ~:session *plot*~
   * define graphical output results with ~:results output graphics file~
   * define output PNG file with ~:file ~/plot.png~
   * define a source code file with ~:tangle second.R~
   * include comments in source code file with ~:comments org~
   * name the code block and give it the name: ~random_plot~.
   
** Code block statements

   Inside the code block, put one R statement:

   #+begin_example
   plot(rnorm(100))
   #+end_example
     
* Run code block

  * Move your cursor anywhere inside the code block and type ~C-c
  C-c~

  * Move your cursor on the output file link ~file:~/plot.png~ and
    type ~C-c C-o~ (or ~M-x org-open-at-point~)

  * The output file should open in another buffer

  * Save the Org-mode file

* Extract R source code

  Move your cursor anywhere inside the code block and type ~C-c C-v
  t~ or ~M-x org-babel-tangle~. You should get a confirmation in the
  echo area that 1 file was tangled.

  Check the file in your current directory with ~C-x d~ (you may have
  to refresh the ~Dired~ buffer with ~g~).

* Run the R program in the Emacs shell

  * Open an Emacs shell with ~M-x eshell~

  * At the prompt, enter ~ls -la~ to make sure that the ~second.R~
    script is there

  * At the prompt, run the script directly with ~Rscript second.R~

  * The output file ~plot.png~ will now have been updated in your
    ~$HOME~ directory

* Add references

  I bet you thought you were done. You're not, because documentation
  needs references if you used anybody else's material - in this case
  Org-mode and the R project programming language. Find the proper
  reference for the R project by changing to the R session buffer
  ~*plot*~ and entering ~citation()~. You can now copy and paste the
  reference straight to your file by marking the region (~C-SPC~),
  copying it (~M-w~) and yanking it to ~second.org~ (~C-y~).

  If you like, you can add links to the references, too. To to this,
  use the key sequence ~C-c C-l~ (or ~M-x org-insert-link~).

* Sample solution

  You can compare your results with my [[https://drive.google.com/drive/folders/15Tr8t0_jSMOAfrWrS8a1IpCg1VzGSRMm?usp=sharing][sample solutions in GDrive]] - to
  see all of the code, download the file and open it in Emacs[fn:2].

* Footnotes

[fn:3]Note that this may not be your ~$HOME~ folder, in which case you
have to navigate to it inside Emacs (with ~C-x d~).

[fn:2]GitHub does not show most of the Org-mode meta information.

[fn:1]To add all of this automatically, you can use ~M-x
org-skeleton~. You need to define this skeleton in your ~.emacs~ file:
#+begin_src emacs-lisp
  (define-skeleton org-skeleton
    "#+TITLE:" str " \n"
    "#+AUTHOR:" str " \n"
    "#+SUBTITLE:" str " \n"
    "#+STARTUP:overview hideblocks\n"
    "#+OPTIONS: toc:nil num:nil ^:nil\n")
#+end_src
Whenever you make changes to ~.emacs~, you need to either restart
Emacs or evaluate the changed buffer with ~M-x eval-buffer~.
