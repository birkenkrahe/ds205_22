#+TITLE: Org-Mode Coding Assignment
#+AUTHOR: Marcus Birkenkrahe
#+SUBTITLE: For DSC205 / Introduction to Advanced Data Science
#+STARTUP:overview hideblocks
#+OPTIONS: toc:nil num:nil ^:nil
* Creating and running R inside an Org-mode file

  This file contains the first ~Org-mode~ *class assignment*, and a
  *glossary* of terms. The main challenge is not the programming
  language but managing the complexity of writing a "literate" program
  ([[KN92][Knuth, 1992]]), which includes layout like headlines, links,
  documentation, source code and result elements. Note that the sample
  solution also lists relevant references at the end[fn:1].

** Create a working directory

   - Open Emacs and go to your ~$HOME~ directory (with ~C-x C-f~)
   - In the ~Dired~ buffer, type ~+~, type the name of the new
     directory ~org-mode~ after the ~/ and press ENTER (aka RET).
   - Go to the new directory (with ~C-x C-f~)
   - This is now your ~default-directory~, which you can find out by
     typing ~C-h v default-directory~

** Create an Org-mode file

   Create an Org-mode file named ~first.org~ with ~C-x C-f~ in your
   ~default-directory~ with the following characteristics:

   - Two lines with meta information:

     #+begin_example
     #+TITLE: First Org-file
     #+AUTHOR: [yourname]
     #+end_example

   - A paragraph of *text* that explains what the following code block
     does, starting with a headline. Here is an example text that you
     may copy:

   #+begin_example
    * My first Org-mode file

    This Org-mode file prints the structure of the data frame ~mtcars~
    and creates a source code file ~first.R~ that can be executed on
    the command line.
   #+end_example

   (To align text in a buffer, type ~C-M-\~ and ~M-q~.)

   - An [[R][R]] source *code block*, which looks like this:

   #+begin_example
     #+name: [name]
     #+begin_src [header]
       [statements]
     #+end_src
   #+end_example

   - Replace ~[name]~ by ~str_mtcars~
   - Replace the code block ~[header]~ by the following *arguments*
     (all on the same line, separated by 1 space):

   #+begin_example
     :session *R*
     :results output
     :tangle first.R
     :exports both
     :comments both
   #+end_example     
   
   - In the body of the code block, replace the ~[statements]~ by the
     following two lines of R code:

   #+begin_example
     ## print structure of mtcars data frame
     str(mtcars)
   #+end_example     

** Run Org-mode code block

   - To run the code block, move the cursor anywhere in the block and
     enter ~C-c C-c~[fn:2]
      
   - You should now see this output appear below the code block:

   #+begin_example
   #+RESULTS: str_mtcars

  'data.frame':	32 obs. of  11 variables:
   $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...
   $ cyl : num  6 6 4 6 8 6 8 4 4 6 ...
   $ disp: num  160 160 108 258 360 ...
   $ hp  : num  110 110 93 110 175 105 245 62 95 123 ...
   $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...
   $ wt  : num  2.62 2.88 2.32 3.21 3.44 ...
   $ qsec: num  16.5 17 18.6 19.4 17 ...
   $ vs  : num  0 0 1 1 0 1 0 1 1 1 ...
   $ am  : num  1 1 1 0 0 0 0 0 0 0 ...
   $ gear: num  4 4 4 3 3 3 3 4 4 4 ...
   $ carb: num  4 4 1 1 2 1 4 2 2 4 ...
   #+end_example

   - Save the file with ~C-x C-s~.

  #+caption: sample solution "first.org"
  #+attr_html: :width 700px
  [[./img/firstorg.png]]
    
** Create R source code file

   - Move the cursor back into the code block and type ~C-c C-v t~
     (~org-babel-tangle).

   - In the echo area below, you should see the message:
   #+begin_example
   Tangled 1 code block from first.org
   #+end_example

   - Open the ~Dired~ buffer by typing ~C-x d~ and type ~g~ to
     refresh the buffer. You should now see the files ~first.R~ and
     ~first.org~.

  #+caption: sample solution "first.R"
  #+attr_html: :width 700px
  [[./img/firstr.png]]
      
** Run R source file in the shell

   - Inside Emacs, open a shell with ~C-x eshell RET~

   - At the command prompt (~$~), enter the command ~ls~, and you
     should see all a list of the files in the directory ~org-mode~.

   - Run the file by typing the following command at the prompt:
     #+begin_example
     Rscript first.R
     #+end_example

   - You should see the same output as before, the ~mtcars~ structure.

  #+caption: sample solution run R file in shell
  #+attr_html: :width 700px
  [[./img/eshell.png]]

** Change file names on the shell

   - In the shell, enter the following commands at the prompt to
     rename your files (replace [YourName] by your actual name
     without spaces):

   #+begin_example
   cp first.R [YourName].R
   cp first.org [YourName].org
   #+end_example      

   - Check with ~ls~ that all files are there

** Add an inline image of ~first.R~

   - Create another directory in ~org-mode~ and name it ~img~.

   - Take a screenshot of the file ~first.R~ and put it into ~img~.
 
   - Add the following text and image block at the end of the Org-file.

   #+begin_example
   The image [[firstR]] shows the tangled file. 
  
   #+name: firstR
   #+caption:first.R screenshot
   #+attr_html: :width 500px
   [[./img/firstr.png]]
   #+end_example     

   - To check that the image is linked correctly, enter ~C-c C-x C-v~,
     and you should see it in the Org-file[fn:3]. 

   #+caption: inline image
   #+attr_html: :width 500px
   [[./img/img.png]]

** Don't forget the references!

   - Add a headline ~References~ at the end of the file

   - Add references for the software packages that you used to
     complete the assignment.

** Submit your assignment

   - Upload your ~first.org~ file 
   
** Glossary

   Your org files and notebooks do not always have to have glossaries,
   but if you have non-trivial information ready to be summarized or
   visualized, you should use tables and graphs to do so.

   | TERM                       | EXPLANATION                                      |
   |----------------------------+--------------------------------------------------|
   | Org-mode headline          | Starts with one ore more ~*~ characters          |
   | Org-mode code block        | An executable (in some language) block of text   |
   | Org-mode code block header | Language and optional arguments                  |
   | Argument                   | Some data passed on for further processing       |
   | Function                   | Algorithm f(x) expecting an argument x           |
   | String                     | Data type representing text                      |
   | Begin/End statement        | Symbol to signal the start/end of a command      |
   | File                       | Storage unit in a computer                       |
   | GitHub repo                | Cloud storage platform                           |
   | Uploading                  | Sending so that file exists locally and remotely |

* References

  /This reference section is missing some references - please find them
  yourself/

  <<KN92>> Knuth (1992). Literate Programming. Stanford: CSLI. [[https://www-cs-faculty.stanford.edu/~knuth/lp.html][URL:
  stanford.edu]].

* Footnotes

[fn:3]This is another toggling command (~org-toggle-inline-images~).

[fn:2]If you have more than one code block and want to run them all
from the top, type ~C-c C-v b~. You can find this key sequence with
~C-h f org-babel-execute-buffer~. 

[fn:1]The references have URLs, and these URLs have inline links. To
add a link in GNU Emacs Org-mode, use the key sequence ~C-x C-l [link]
RET~ (~org-insert-link~). You need to cite all original sources
authored by others that you use - including software.
