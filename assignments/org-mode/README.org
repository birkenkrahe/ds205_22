#+options: toc:nil
#+options: num:nil
* Org-mode coding assignment

  This file contains the first ~Org-mode~ assignment, a glossary of
  terms, and a sample solution in the programming language C instead
  of R. The main challenge is not the programming language but
  managing the complexity of writing a "literate" program, which
  includes layout like headlines, links, documentation, source code
  and result elements. Note that the sample solution also lists
  relevant references at the end[fn:1].

** Assignment

   Create an Org-mode file with the following characteristics:

   * A headline: ~* My first Org-mode file~.
   * A paragraph that explains what the following code block does.
   * A R source code block:
   #+begin_example
   #+name: [name]
   #+begin_src [header]
     [statements]
   #+end_src
   #+end_example
   * In the source block, replace ~[name]~ by ~mtcars~.
   * In the header of the source block, replace ~[header]~ by these arguments:
   #+begin_example
   :session *R*
   :results output
   :tangle first.R
   :exports both
   :comments both
   :var DATA="mtcars"
   #+end_example

   * In the body of the code block, replace the ~[statements]~ by a single
     command preceded by a comment:
   #+begin_example
   ## print structure of mtcars data frame
   str(DATA)
   #+end_example

   * Save the file as ~YourName.org~ (e.g. ~MarcusBirkenkrahe.org~)
   * Upload the file to [[https://github.com/birkenkrahe/ds205/tree/main/assignments/org-mode][this GitHub repo]]:
     ~/birkenkrahe/ds205/assignments/org-mode~

** [[https://github.com/birkenkrahe/ds205/blob/main/assignments/org-mode/MarcusBirkenkrahe.org][Example solution in C (not R)]]

   When you look at this as a PDF or on GitHub, you will not see
   the *Org-mode* commands delimited by ~#+~. Org-mode files are meant to be
   edited/viewed in Emacs.

**** My first Org-mode file

     * The function ~puts()~ prints out a string (text in quotes) to
       the screen.

     * In the code block, the syntax is highlighted (which colors are
       used exactly depends on the Emacs theme used).

     * The code block header has the following arguments:

     | HEADER ARGUMENT     | MEANING                                                |
     |---------------------+--------------------------------------------------------|
     | ~:main yes~         | wrap ~puts~ statement in ~int main(void) { }~ function |
     | ~:includes stdio.h~ | include standard input/output header file              |
     | ~:tangle first.c~   | export source code as C file ~first.c~  ("tangle")     |
     | ~:exports both~     | both result and source code will be exported           |
     | ~:comments both~    | link source code and org files, add comments to source |
     | ~:results raw~      | insert output directly in org format into org file     |

     #+name: hello_world_program
     #+begin_src C :exports both :main yes :includes stdio.h :tangle first.c :results raw :comments both
       // print a string
       puts("hello world");
     #+end_src

     #+RESULTS: hello_world_program
     hello world

*** Executing the program on the command line

    In Emacs (provided the C compiler ~gcc~ is available and in the ~PATH~):
    #+begin_example
    M-x eshell
    gcc -o first first.c
    ./first.exe
    #+end_example

    #+attr_html: :width 500px
    [[./img/gcclight.png]]

*** References
    * ~gcc~, the GNU Compiler Collection. [[https://gcc.gnu.org][URL: gcc.gnu.org.]]
    * ~GitHub~: software hosting platform. [[https://github.com][URL: github.com]].
    * Kernighan, Brian W.; Ritchie, Dennis M. (February 1978). The ~C~
      Programming Language (1st ed.). Englewood Cliffs, NJ: Prentice
      Hall. ISBN 0-13-110163-3. [[https://archive.org/details/TheCProgrammingLanguageFirstEdition][URL: archive.org]].
    * Knuth (1992). Literate Programming. Stanford: CSLI. [[https://www-cs-faculty.stanford.edu/~knuth/lp.html][URL:
      stanford.edu]].
    * ~mtcars~: Motor Trend Car Road Tests. [[https://www.rdocumentation.org/packages/datasets/versions/3.6.2/topics/mtcars][URL: rdocumentation.org]].
    * ~R~ Core Team (2021). R: A language and environment for statistical
      computing. R Foundation for Statistical Computing, Vienna, Austria.
      [[https://r-project.org][URL: r-project.org]].
    * ~str~: Compactly Display the Structure of an Arbitrary R
      Object. [[https://www.rdocumentation.org/packages/utils/versions/3.6.2/topics/str][URL: rdocumentation.org]].
    * tecosaur (n.d.). The Org Manual: 16 Working with Source Code
      [website]. [[https://orgmode.org/manual/Working-with-Source-Code.html][URL: orgmode.org]].

** Glossary

   Your org files and notebooks do not always have to have glossaries,
   but if you have non-trivial information ready to be summarized or
   visualized, you should use tables and graphs to do so.

   | TERM                       | EXPLANATION                                      |
   |----------------------------+--------------------------------------------------|
   | Org-mode headline          | Starts with one ore more ~*~ characters          |
   | Org-mode code block        | An executable (in some language) block of text   |
   | Org-mode code block header | Language and optional arguments                  |
   | Argument                   | Some data passed on for further processing       |
   | Function                   | Algorithm f(x) expecting an argument x           |
   | String                     | Data type representing text                      |
   | Begin/End statement        | Symbol to signal the start/end of a command      |
   | File                       | Storage unit in a computer                       |
   | GitHub repo                | Cloud storage platform                           |
   | Uploading                  | Sending so that file exists locally and remotely |

* Footnotes

[fn:1]The references have URLs, and these URLs have inline links. To
add a link in GNU Emacs Org-mode, use the key sequence ~C-x C-l [link]
RET~ (~org-insert-link). In published Org files, references should be
used in the text as inline citations like in the example below, which
links the first mention of C to a reference.
#+begin_example
  Create a C source block in (Kernighan/Ritchie, 1978).
#+end_example
This is also why there are so many references - one reference for
every non-trivial concept or software tool used!
