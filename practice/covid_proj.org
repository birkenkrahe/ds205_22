* README

  * Demo of ggplot2 using early pandemic COVID data

  * The material covered comes from the following DataCamp courses:
    - [[https://learn.datacamp.com/courses/introduction-to-data-visualization-with-ggplot2][Data Visualization with ggplot2]] (a graphics package for R)
    - [[https://learn.datacamp.com/courses/intermediate-data-visualization-with-ggplot2][Intermediate Data Visualization with ggplot2]]
    - [[https://learn.datacamp.com/courses/data-manipulation-with-dplyr][Data Manipulation with dplyr]] (a table manipulation package in R)
    - [[https://learn.datacamp.com/courses/introduction-to-importing-data-in-r][Introduction to Importing Data in R]] (using ~read.table~)

  * To look at the whole project at once [[https://rpubs.com/zaharoian/covid19datacamp][see here]].

  * We'll revisit some topics in our gapminder project

* Aspects of this project (discussion)

  The table [[project_aspects]] lists some (*variable*) aspects of this
  project. In practice, you would revisit these before, during and
  after the project.

  #+name: project_aspects
  | ASPECT     | CONTENT               | DECISIONS                  |
  |------------+-----------------------+----------------------------|
  | Technical  | R packages            | Base R, ggplot2            |
  | Scientific | Data science pipeline | Data quality, presentation |
  | Political  | Policy                | Funding, trust, future     |
  | Personal   | Pro or Con            | Do it or don't, dig deeper |

  *Which aspects did you find interesting and why (not)?*

** Personal

   * Alright - "we've talked about COVID a lot"
   * These plots were new?
   * I somewhat disliked this project
   
** Technical

   * Fun to create fancy graphs with little effort
   * Is ggplot2 really necessary?
   * dplyr - table manipulation (similar to SQL)
   * linear modeling with the glm() family of functions
    
** Scientific

   * You should always try to go to the source of the data
     (In this case: JHU)
   * Data quality in this area needs to be questioned
   * Issues are: collection procedures and measures
   
** Political

   * Ongoing issue (with every new variant)
  

** Example: getting the data for your own project

   * I found this dataset via
     1) Google search of ~datasets/confirmed_cases_worldwide.csv~
     2) The site [[https://ourworldindata.org/coronavirus-source-data][ourworldindata.org]] uses JHU [[https://ourworldindata.org/covid-data-switch-jhu][as the main data source]]
     3) Data import from [[https://github.com/owid/covid-19-data/blob/master/public/data/testing/covid-testing-latest-data-source-details.csv][GitHub]] - you need the raw source

   * Or you can select the Jan-Mar 17, 2020 timeline and download the
     CSV data from the "[[https://ourworldindata.org/explorers/coronavirus-data-explorer][COVID-19 Data Explorer]]", a graphical dashboard.

   * From the "[[https://ourworldindata.org/explorers/coronavirus-data-explorer][COVID-19 Data Explorer]]".

     #+attr_html: :width 500px
     #+caption: Cumulative cases (Asia, Europe, USA) Jan-March 17, 2020 (Source: OWID)
     [[./img/owidlin.png]]

     #+attr_html: :width 500px
     #+caption: Cumulative cases (Asia, Europe, USA) Jan-March 17, 2020 (Source: OWID)
     [[./img/owidlog.png]]

   * [ ] What's wrong with just using such a nice dashboard solution?

* From epidemic to pandemic
** Load packages

   * We load three different packages - for data import (readr),
     graphics (ggplot2) and table manipulation (dplyr).

   * They're contained in the "Tidyverse" package but it's preferable
     to load them individually.

   * [ ] Why is it better to load packages individually?

   #+begin_src R :exports both :session :results silent
     ## Load the readr, ggplot2, and dplyr packages
     library(readr)
     library(ggplot2)
     library(dplyr)
   #+end_src

** Reading data into a data frame using ~readr::read_csv~

   * We use readr::read_csv to read a (local) CSV file into a data
     frame

   * [ ] What's a data frame again? Can you define it?

     #+begin_quote

          #+end_quote
     
   * The command creates a number of substructures

   #+name: read_csv
   #+begin_src R :exports both :session :results output

     ## Read datasets/confirmed_cases_worldwide.csv into confirmed_cases_worldwide
     confirmed_cases_worldwide <- read_csv("data/covid.csv")

     ## Try to fix tibble display problems in Emacs + ESS
     ## Source: https://github.com/emacs-ess/ESS/issues/810
     options(crayon.enabled = FALSE)

     ## Print out confirmed_cases_worldwide
     str(confirmed_cases_worldwide)
     class(confirmed_cases_worldwide)
   #+end_src

*** readr::read_csv

    #+name: readr
    #+begin_quote
    "The goal of readr is to provide a fast and friendly way to read
    rectangular data from delimited files, such as comma-separated values
    (CSV) and tab-separated values (TSV). It is designed to parse many
    types of data found in the wild, while providing an informative
    problem report when parsing leads to unexpected results. If you are
    new to readr, the best place to start is the data import chapter in R
    for Data Science." ([[https://readr.tidyverse.org/][online documentation]])
    #+end_quote

    * [ ] Check the documentation for ~read_csv~ and its many options.

    * [ ] Test the claims made in the quote [[readr]] by reading the Pima
      indians diabetes data set (in GDrive - download [[https://www.kaggle.com/datasets/kumargh/pimaindiansdiabetescsv?resource=download][via Kaggle]]).

    * [ ] Try to extract the ZIP file itself first, then the unzipped
      CSV file

    * [ ] After extraction, print the data structure and the first few
      lines

      #+name: pima_archive
      #+begin_src R :exports both :session :results output

      #+end_src

      #+name: pima
      #+begin_src R :exports both :session :results output



      #+end_src


    * [ ] For comparison, extract the archive and the CSV data using the Base R
      function ~read.csv~

      #+name: pima_base
      #+begin_src R :exports both :session :results output


      #+end_src


      * The Base R function cannot read the ZIP file.

        #+name: pima_base_zip
        #+begin_src R :exports both :session :results output


        #+end_src

** Reading data into a data frame using Base R's ~read.csv~

   * We use ~read.csv~ to read a (local) CSV file into a data frame

   #+name: read.csv
   #+begin_src R :exports both :session :results output
     ## Read data into cases
     cases <- read.csv("data/covid.csv")

     ## Print out confirmed_cases_worldwide
     str(cases)
     class(cases)
   #+end_src

*** utils::read.table

    #+begin_quote
    "Reads a file in table format and creates a data frame from it,
    with cases corresponding to lines and variables to fields in the
    file."
    #+end_quote

    * Lines and fields are synonyms for rows and columns, resp.

    * Cases or records, and variables or vectors are the corresponding
      names for the data structure (data frame)

    * It is often important to distinguish between data in the real
      world (usually the result of real observations) and their
      representation by a machine

* Confirmed cases throughout the world
** Basics: data and layout (aes and geom)

   * To get this plot from the downloaded data, the ~aes~ argument has
     to be adapted accordingly.

   * Remember: ~aes~[thetics] means data, as in x and y for 2d plots,
     while ~geom~[etry] means layout

   * [ ] What does ggplot do if only one argument is given to ~aes~?

   * [ ] Answer: Depends on the layout function! ~geom_hist~ works
     (counts occurrences), but ~geom_point()~ does not. A few examples:

     - Flipped Histogram

       #+name: aes_hist
       #+begin_src R :file aeshist.png :exports both :session :results output graphics file
         ggplot(data=mtcars, aes(y=mpg)) +
           geom_histogram() +
           coord_flip()
       #+end_src

     - Boxplot

       #+name: aes_box
       #+begin_src R :file aesbox.png :exports both :session :results output graphics file
         ggplot(data=mtcars, aes(y=mpg)) +
           geom_boxplot()
       #+end_src

** base::plot is generic

   * [ ] Compare this with ~base::plot~, which is a generic function
     capable of adapting to different data structures.

     Plot the ~mpg~ variable of ~mtcars~.

     #+name: plotmpg
     #+begin_src R :file plotmpg.png :exports both :session :results output graphics file


     #+end_src

   * [ ] To see which data structures ~plot~ can digest, check ~methods(plot)~.

     #+name: methods
     #+begin_src R :exports both :session :results output

     #+end_src

     #+RESULTS: methods

** Plotting a line graph straight from the full data set

   #+name: plot
   #+begin_src R :exports both :session :results output graphics file :file caseline.png
     ## Draw a line plot of cumulative cases vs. date
     ## Label the y-axis
     ggplot(
       confirmed_cases_worldwide,
       aes(x=Day, y=`Total confirmed cases of COVID-19`)) +
       geom_line() +
       ylab("Cumulative confirmed cases")
   #+end_src

** Plot points not lines

   * If you change ~geom_line()~ to ~geom_point()~, you see the
     individual lines (for each entity, or country): the cumulative
     case line is the enveloping line for all of them.

     #+name: points
     #+begin_src R :exports both :session :results output graphics file :file casepts.png
     ## Draw a line plot of cumulative cases vs. date
     ## Label the y-axis
     ggplot(
       confirmed_cases_worldwide,
       aes(x=Day, y=`Total confirmed cases of COVID-19`)) +
       geom_line() +
       ylab("Cumulative confirmed cases")
          #+end_src

** Limit the data set by filtering

   * To narrow the data to the day range covered by the DataCamp
     project, you can use ~dplyr::filter~ applied to the ~Day~
     variable. This function filters all values for which the argument
     is ~TRUE~.

     Use ~geom_point~ for the plot layout.

     #+name: plot1
     #+begin_src R :exports both :session :results output graphics file :file caseline1.png
       ## Draw a point plot of cases vs. date
       ## Label the y-axis
       confirmed_cases_worldwide %>%
         filter(Day < "2020-03-18") %>%
         ggplot(
           aes(
             x=Day,
             y=`Total confirmed cases of COVID-19`)) +
         geom_point() +
         ylab("Cumulative confirmed cases")
     #+end_src

** Use both lines and points

   * [ ] Experiment with mixing both point and line layout: use both
     layouts in the same plot! Remember that layouts are layered.'

     Below is the code from above. Alter it accordingly and run it.

     #+name: plot2
     #+begin_src R :exports both :session :results output graphics file :file casemix.png
       ## Draw a plot of cumulative cases vs. date
       ## Label the y-axis
       confirmed_cases_worldwide %>%
         filter(Day < "2020-03-18") %>%
         ggplot(
           aes(
             x=Day,
             y=`Total confirmed cases of COVID-19`)) +
         geom_point() +
         ylab("Cumulative confirmed cases")
     #+end_src

** Compare with the DataCamp plot

   * This is the output from DataCamp:

     #+attr_html: :width 400px
     #+caption: Cumulative Covid cases Feb/Mar 2020 (DataCamp)
     [[./img/dcplot.png]]

   * [ ] How can you remove the shading under the curve in our plot
     from the code block [[plot]] above? (Extra credit question!)

** Emacs tip

   * [ ] Emacs info: you can change the HTML and screen layout of a
     plot with meta data - e.g. ~#+attr_html: :width 400px~ would
     restrict the width of the following inline image to 400px.

     Try that with the last inline image - set the width to 200px.

     To open/close inline images, use the key sequence C-c C-x C-v (or
     the command M-x org-toggle-inline-images).

** Further reading

   * [[http://www.sthda.com/english/wiki/ggplot2-line-plot-quick-start-guide-r-software-and-data-visualization][ggplot2 line plot : Quick start guide]] (2018)
   * [[https://www.r-bloggers.com/2020/09/create-a-line-graph-with-ggplot/][Create a line graph with ggplot]] (2020)

* China compared to the rest of the world

  See also: [[https://rpubs.com/zaharoian/covid19datacamp][online project notebook copy]]

** Glimpse of the data

   * [ ] What does dplyr::glimpse do?

     Same thing (almost) as ~str~ but "it tries to show you as much
     data as possible" (documentation). Run ~glimpse~ on the data frame
     ~mtcars~ and compare with ~str~.

     #+name: glimpse
     #+begin_src R :exports both :session :results output


     #+end_src

** Aesthetics inside a geometry of the plot

   * [ ] What's the effect of putting ~aes~ into the geometry instead
     of into the ~ggplot~ call?

     Let's try that with the plot we already made.

     #+name: aes_in_geom
     #+begin_src R :exports both :session :results output graphics file :file aes_in_geom.png
       ## Draw a point plot of cases vs. date
       ## Label the y-axis
       confirmed_cases_worldwide %>%
         filter(Day < "2020-03-18") %>%
         ggplot() +
         geom_point(
           aes(x=Day,
               y=`Total confirmed cases of COVID-19`)) +
         ylab("Cumulative confirmed cases")
     #+end_src

   * [ ] Answer: The geometry is responsible for the drawing - putting
     the aes in a geom function means that we only draw on the data
     specified in the geom function call.

** Plot China data

   * The attribute ~group~ removes the default grouping and splits the
     data into Chinese and non-Chinese data (using the variable
     ~$Entity~ in the original data frame)

   * None of these changes are permanent - they are only valid for the
     creation of the graphical object (better: save data in a separate
     data structure)

   * The attribute ~color~ colors both categorical variables of the
     underlying data set

* Let's annotate!

  * You've already seen annotation in the test data analysis when we
    drew vertical lines for the average values

  * [ ] ~who_events~ is a data frame with two variables. Create this
    data frame using these data - not as a "tribble" but using the
    Base R tools that you already know.

    #+name: who_event_data
    #+begin_example
    "2020-01-30" "Global health\nemergency declared"
    "2020-03-11" "Pandemic\ndeclared"
    "2020-02-13" "China reporting\nchange"
    #+end_example

    #+name: who_events
    #+begin_src R :exports both :session :results output
 
    #+end_src

   * The functions ~geom_vline~ and ~geom_text~ are drawn using the
    data frame and their own attributes. The Base R equivalents are
    [[https://stat.ethz.ch/R-manual/R-devel/library/graphics/html/abline.html][~abline~]] (drawing a line from a to b, horizontally or
    vertically), and [[https://stat.ethz.ch/R-manual/R-devel/library/graphics/html/text.html][~text~]].

* Adding a trend line to China

  * You can use dplyr::filter to filter data set lines / rows that
    fulfil a set of logical conditions.

  * ~geom_smooth~ implements a linear model.

    #+begin_quote
    "Calculation is performed by the (currently undocumented)
    ~predictdf~ generic and its methods. For most methods the standard
    error bounds are computed using the ~predict()~ method - the
    exceptions are ~loess~ which uses a t-based approximation, and
    ~glm~ where the normal confidence interval is constructed on the
    link scale, and then back-transformed to the response scale."
    ([[https://tidyverse.github.io/ggplot2-docs/reference/geom_smooth.html][ggplot2 doc]])
    #+end_quote

  * [ ] what does the attribute ~se=FALSE~ mean? (Answer: [[https://ggplot2.tidyverse.org/reference/geom_smooth.html][see doc]])
    
  * For more information and a demo, see ~??predict~ and run the
    ~glm()~ demo with examples.

  * Better: separate modeling and creation of pretty plots. Understand
    functions like ~glm()~ before blindly applying them (needlessly,
    in this case - the linear modeling adds nothing to the plot).
    
* And the rest of the world?
* Adding a logarithmic scale

  * [ ] What does the image suggest?
  * [ ] What does it mean "we get a much closer fit of the data?"
  * [ ] What do you think of the graph (in terms of communication)?

* Which countries outside of China have been hit hardest?

  * [ ] What does dplyr:group_by do?
  * [ ] What does dplyr::summarize do?
    
* Plotting hardest hit countries as of Mid-March 2020

  * [ ] Why do we move the aesthetic mapping back into the main
    function?

* References

  * Wickham H, Hester J, Bryan J (2022). readr: Read Rectangular Text
    Data. https://readr.tidyverse.org,
    https://github.com/tidyverse/readr.
  * R Core Team (2021). R: A language and environment for statistical
    computing. R Foundation for Statistical Computing, Vienna,
    Austria. URL https://www.R-project.org/.
