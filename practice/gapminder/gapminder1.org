#+title: Exploring gapminder 1
#+author: Marcus Birkenkrahe
#+subtitle: Practice notebook for DSC 205 Spring 2022
#+options: toc:nil ^:nil
#+startup: hideblocks overview
#+property: header-args:R :session *R*
#+property: header-args:R :results output
#+property: header-args:R :exports both
* README

  In this extensive notebook, you're learning how relatively simple
  ggplot2 and dplyr code can create interesting plots - always
  provided the underlying dataset is interesting.

  For an overview of both of these "Tidyverse" packages, see the
  online reference pages for [[https://ggplot2.tidyverse.org/reference/][ggplot2]] and [[https://dplyr.tidyverse.org/reference/index.html][dplyr]][fn:1].

  The dataset is gapminder adapted from the original dataset created
  by Hans Rosling[fn:2].

  This workbook is adapted from chapter 10 "Data visualization in
  practice" of the textbook by [[dslabs][Irizarry (2021)]], which is also the
  basis of an introductory data science course at Harvard U.

* Getting the data

  * We need to install some things first. Don't just click through
    these commands but make absolutely sure that you really understand
    every step and every command.

  * If you really understand a command in R, you know what the
    alternative paths are. There is always at least one alternative
    way of getting what you want in R (this is true for all good
    programming languages).

  * [ ] To be able to run the installation inside Org-mode (and see
    the output here), I put one line in my ~.Rprofile~. This file will
    be fetched by Emacs + ESS, so it needs to be placed in the Emacs
    HOME directory. You can also run the code right now.

    #+name: optionsRepos
    #+begin_src R :session *R* :results silent
      options(repos=c("https://cloud.r-project.org/"))
    #+end_src

  * [X] Check where your computer gets its CRAN packages from. If you
    put the code [[optionsRepos]] into ~.Rprofile~, you should get the
    nearest mirror.

    #+begin_src R :exports both :session :results output
      getOption("repos")
    #+end_src

    #+RESULTS:
    : [1] "https://cloud.r-project.org/"


  * [X] We need a couple of packages and a dataset. Put the code in
    [[lockAndLoad]] below and run it:

    1) Install the ~tidyverse~ and the ~dslabs~ packages
    2) Load the ~tidyverse~ and the ~dslabs~ packages
    3) Load the ~gapminder~ dataset from the ~dslabs~ package

    #+name: lockAndLoad
    #+begin_src R :exports both :session :results silent





    #+end_src

  * [ ] Check which packages were loaded.
    
    #+begin_src R :exports both :session :results output

    #+end_src    

    - I set the output of [[lockAndLoad]] to ~silent~. If you want to see
      what R did, check the R console session in the ~*R*~ buffer.

    - [[https://www.gapminder.org/data/][The original Gapminder data set]] is much larger than the
      [[https://cran.r-project.org/web/packages/gapminder/README.html][subset at CRAN]] or the dslabs dataset.

  * [X] Check ~??gapminder~ in the R console to see how many gapminder
    data sets you have available for loading.

  * [X] If you looked at the output of the ~data~ loading command, you
    may have noticed that the data display is messed up with control
    characters. If this happens with a familiar command (e.g. ~str~)
    it's to with the "tibble" format that "Tidyverse" data frames come
    in. To get rid of the extra characters, run this command (or
    better put it into your .Rprofile:

    #+begin_src R :results silent
     options(crayon.enabled = FALSE)
    #+end_src
    Tibbles are limited to 10 rows by default.

  * [X] If [[lockAndLoad]] ran successfully, I recommend you go back to
    the code block and comment the ~install.packages~
    commands. Otherwise, your workbook may attempt to re-install them.

  * [X] You don't need to re-install packages unless a) you upgraded
    to a different version of R, or b) the package was upgraded.

    You can update your installed packages with one command (Wasser,
    2021). You should do this on the console - answer "Yes" always.

    Check the (local) ~update.packages()~ reference for additional
    options and commands. You can run the commmand below in the R
    console.

    #+name: updatePackages
    #+begin_example R
      update.packages()
    #+end_example

** Section summary

   * Knowing alternative paths in R is not a waste
   * Installing and loading R packages
   * Updating R packages
   * Tibble format for data frames

* Checking and getting to know the data

  * [ ] Check the structure of ~gapminder~. You see ~numeric~ and
    ~factor~ vectors.

    #+name: structure
    #+begin_src R :exports both :session :results output

    #+end_src
    
  * [ ] Check the local help for the dslabs ~gapminder~ dataset for
    the meaning of the variables (do this from the R console).

  * [ ] Make a copy of ~gapminder~ as ~gm~ so you won't have to do so
    much typing (and also to protect the original data). Check that
    they're identical!

    #+name: copy
    #+begin_src R :exports both :session :results output


    #+end_src

  * [ ] Print the first 10 lines of the first four columns, and then
    the first 10 lines of the next four columns of the data frame.

    #+name: top10
    #+begin_src R :exports both :session :results output



    #+end_src

  * [ ] This isn't a Nintendo Gameboy. You've got screen space! Reset
    the number of columns printed on a line by resetting the attribute
    ~width~ of ~options~ to the value 140 (the default is 80, the
    maximum value is 10,000).

    To test the new setting, print the top 10 lines of the whole
    dataframe.

    #+name: width
    #+begin_src R :exports both :session :results output


    #+end_src

  * [ ] Print the dataframe as a "tibble". To do this, run the
    function ~as_tibble~ with ~gapminder~ as the argument.

    In Emacs, you will see the control characters obscuring the
    display. To view it as it was meant to look like, switch to the R
    console in the *R* buffer and run the command there.

    #+name: tibble
    #+begin_src R :exports both :session :results output
      options(crayon.enabled=FALSE)

    #+end_src

    The figure [[fig:tibble]] shows what you should see. As you can see,
    the format is condensed to fit the 80-char default display
    setting. ~NA~ values are highlighted in color, data types are
    shown in a separate row, and 10 lines are shown by default only.

    None of these are either essential or even add much to our
    understanding of the data (beyond the basic ~str~ command). At the
    same time, an extra dependency (character layout) is introduced.

    #+name: fig:tibble
    #+attr_html: :width 600px
    #+caption: Gapminder as tibble
    [[./img/tibble.png]]

  * The dplyr package is a package for data frame
    nmanipulation. We're going to really use it in a moment. dplyr
    makes ample use of the "piping" operator from another package,
    magrittr, ~%>%~ ([[magrittr][Bache, 2014]])[fn:3]. Since last year, base R also
    has its own pipeline operator, which is a little less obscure
    looking: ~|>~.

  * Emacs tip: to follow the footnotes, press ~C-c C-o~ on the footnote,
    to get back here, press ~C-c C-o~ again, this time in the footnote.

  * [ ] You don't see the potential power of pipes if you only use
    one. It becomes a handy tool (to some, not to me[fn:4]) when you
    build a "pipeline" of several commands as we will soon see.

    In [[pipes]], "pipe" the data frame into the ~as_tibble~ function by
    putting it on the left, and the function on the right of the
    operator. Do this first for the magrittr, then for the base R
    operator. (There are some spurious > characters in the output -
    you can just delete the resp. rows).

    #+name: pipes
    #+begin_src R :exports both :session :results output


    #+end_src

** Section summary

   * Reviewing structure checking commands
   * Changing the display width option
   * Printing a data frame as a tibble
   * Pipes to pass data to functions
   * Pipeline concept

* Filtering the data
** Rosling's survey

   * [ ] This is a famous survey question by Rosling at the start of
     his TED talks: for each of the six pairs of countries below,

     1) which country do you think had the highest child mortality
        rates in 2015? (Measured in infant deaths per 1000)
     2) Which pairs do you think are the most similar?

     Think about this, then fill in the table [[tab:survey]] according to
     your opinion (IM = Infant Mortality per 1000). Put a cross next to
     the country that you think has the highter infant mortality.

     #+name: tab:survey
     | COUNTRY   |   IM | COUNTRY      |   IM |
     |-----------+------+--------------+------|
     | Sri Lanka |      | Turkey       |      |
     | Poland    |      | South Korea  |      |
     | Malaysia  |      | Russia       |      |
     | Pakistan  |      | Vietnam      |      |
     | Thailand  |      | South Africa |      |

   * [ ] Let's run the numbers in the code blocks below, then put the
     results in the table [[tab:survey]] and interpret them.

     The code in [[SriLankaTurkey]] shows
     - two pipes ~%>%~
     - the function ~dplyr::filter~ to filter rows for year and countries
     - the operator ~%in%~ to identify if an element is in a vector
     - the function ~dplyr::select~ to select two column vectors

     #+name: SriLankaTurkey
     #+begin_src R :exports both :session :results output
       gm %>%
         filter(year == 2015 & country %in% c("Sri Lanka", "Turkey")) %>%
         select(country, infant_mortality)
     #+end_src

   * [ ] Put in the code for the other four pairs. Now, don't you
     wish you'd have written a function first?

     #+name: PolandSouthKorea
     #+begin_src R :exports both :session :results output


     #+end_src

     #+name: MalaysiaRussia
     #+begin_src R :exports both :session :results output



     #+end_src

     #+name: PakistanVietnam
     #+begin_src R :exports both :session :results output



     #+end_src

     #+name: ThailandSouthAfrica
     #+begin_src R :exports both :session :results output



     #+end_src

   * [ ] Extra credit: Write a function that achieves this and test it
     with the five pairs in table [[tab:survey]] - test it and send me the
     solution via email.

** Interpretation

   * [ ] Interpreting table [[tab:survey]]: apparently, less than 50% of
     surveyed would hit on these numbers, even if they were generally
     educated. Most would automatically assume that non-European
     countries have higher infant mortality rates.

     Rosling took this as a sign that people were misinformed rather
     than ignorant. Can you think of other more concrete reasons why
     the survey answers and the data answers differed so wildly?[fn:5]

   * [ ] List potential reasons (other than misinformation) for the
     survey results in opposition to the data findings in [[reasons]]:

     #+name: reasons
     #+begin_quote
     1) ...

     2) ...

     3) ...
     #+end_quote

   * Rosling's central point in his TED talks and in his books was:
     our 1960s view of the world is outdated. The old dichotomy of
     rich and poor countries no longer holds. The response to table
     [[tab:survey]] in contrast to the findings illustrates this one point
     quite well. But as the analysis shows, the whole truth may well
     be more multi-layered.

** Code analysis and examples
*** Code

    #+name: tableExample
    #+begin_example R
      gm %>%
        filter(year == 2015 & country %in% c("Sri Lanka", "Turkey")) %>%
        select(country, infant_mortality)
    #+end_example

    There is a lot going on in this code already. Let's analyze it
    element by element:
    - pipes ~%>%~
    - ~filter~
    - ~select~
    - ~%in%~

*** gm %>%

    * The first line calls the data frame and pipes it into the
      function on the right hand side of the pipe operator.

    * [ ] Pipe ~gm~ into the function ~is.data.frame~. The answer
      should be ~TRUE~.

      #+name: pipe1
      #+begin_src R :exports both :session :results output
      
      #+end_src

    * [ ] How would you find out how many countries there are in
      ~gapminder~ by stringing functions together using the pipe?

      #+name: pipe2
      #+begin_src R :exports both :session :results output

      #+end_src

      This is equivalent to the expression without pipe. Type the code
      without pipes into the block [[nopipe]] and run it.

      #+name: nopipe
      #+begin_src R :exports both :session :results output

      #+end_src


    * [ ] Count the number of missing ~infant_mortality~ values.

      #+name: pipe3
      #+begin_src R :exports both :session :results output

      #+end_src

*** dplyr::filter

    * ~filter~ returns the rows for which its argument is ~TRUE~. This
      is like the ~WHERE~ operator in SQL.

    * In the code extract [[filter]], the function argument is true for all
      rows of the data frame for whom both conditions are true:
      - the ~year~ is ~2015~, AND
      - the ~country~ is either Sri Lanka or Turkey

      #+name: filter
      #+begin_example R
        filter(year == 2015 & country %in% c("Sri Lanka", "Turkey"))
      #+end_example

*** dplyr::select

    * ~select~ selects column vectors. This is like ~SELECT~ in SQL.

      In the code block below, write a command with *two* pipes starting
      with the data set ~gm~: first, ~select~ the variable ~region~, and
      then print the first ~5~ lines of the column.

      #+name: select
      #+begin_src R :exports both :session :results output

      #+end_src

** The %in% operator

   * ~%in%~ is a value matching operator. It is itself a function that
     runs the ~match~ function: it returns a logical vector indicating
     if there is a match or not for its left operand.

     Check out ~example("%in%")~ for a demo based on the examples from
     the help. A nice touch: ~%in%~ never returns ~NA~.

     #+name: in
     #+begin_example R
       "%in%" <- function(x, table) match(x, table, nomatch=0) > 0
     #+end_example

** Section summary

   * Data findings need to be critically viewed just like people's
     opinions. Important aspects include: data quality, samples, and
     context. Though the data may not change, their interpretation
     may.

   * dplyr's commands - like ~select~ for column vector selection, or
     ~%in%~ for pattern matching- were designed with SQL in mind.

   * The pipe operator can be used to string commands together as a
     pipeline where the output of the last command becomes the input
     of the next. In R, both ~|>~ (base R) and ~%>%~ (dplyr) are valid
     pipe operators.

* Scatterplots

  * [ ] Use ggplot to plot ~life_expectancy~ vs. ~fertility~ rate
    (average number of children per woman), for data from 50 years
    ago - ~filter~ the year ~1962~), using the scatterplot geometry
    (~geom_point~).

    #+name: life_fertility_1
    #+begin_src R :file life_fertility_1.png :exports both :session :results output graphics file



    #+end_src

  * There are two clusters:
    1) life expectancy around 70 years and 3 or fewer children per
       family
    2) life expectancy lower than 65 years and more than 5 children
       per family

  * [ ] To confirm that these countries are from the regions we
    expect, add ~color=continent~ to the aesthetic mapping.

    #+name: life_fertility_2
    #+begin_src R :file life_fertility_2.png :exports both :session :results output graphics file



      #+end_src

  * In 1962, the view of the West vs. developing world is clearly
    visible. Let's check on the situation 50 years later.

* References

  * <<magrittr>> Bache SM (Nov 2014). Introducing magrittr
    [vignette]. [[https://cran.r-project.org/web/packages/magrittr/vignettes/magrittr.html][URL: cran.r-project.org]].

  * <<berggren>> Berggren C (16 Nov 2018). The One-Sided Worldview of
    Hans Rosling [article]. [[https://quillette.com/2018/11/16/the-one-sided-worldview-of-hans-rosling/][URL: quillette.com]].

  * <<dslabs>> Irizarry R (2021). Introduction to Data Science - Data
    Analysis and Prediction Algorithms with R. CRC Press. [[https://rafalab.github.io/dsbook/gapminder.html][URL:
    rafalab.github.io]].

  * <<wasser> Wasser L (Apr 8, 2021). Installing & Updating Packages
    in R [tutorial]. [[https://www.neonscience.org/resources/learning-hub/tutorials/packages-r][URL: neonscience.org]].
* Footnotes

[fn:5]Yet another issue I have whenever the word "misinformation" is
used - and "disinformation" is even worse in this regard - it
instantly summons the idea of an agent, and gives thereby rise to
conspiracy theories before other avenues of explanation were explored.

[fn:4]You know me as a pipeline fanatic if you follow my Operating
Systems course. However the UNIX command pipeline is completely
different beast. It consists of single, super-focused, fast commands,
each of them easy to understand, that unfold their great power when
working side by side in a pipeline. The R pipeline only takes the
general concept and idea from UNIX. In my view, it is unnecessary,
slows process down and makes debugging much harder.

[fn:3]This article, by the way, is a so-called "vignette", a long
prose writeup documenting an R package. The best, and most used
packages come with their own vignettes, which include use cases,
examples etc., on top of the minimal package doc.

[fn:2]The story of Hans Rosling and the Gapminder foundation has two
sides. The bright side shines off Rosling's viral TED talks. The
darker side is a little harder to detect, see e.g. "[[https://quillette.com/2018/11/16/the-one-sided-worldview-of-hans-rosling/][The One-Sided
Worldview of Hans Rosling]]" in [[berggren][Berggren (2018)]].

[fn:1]A complete introduction to the "Tidyverse" is beyond my
abilities. I don't work with the package much, and it consists of
several packages each of which come with hundreds of functions. That's
supposedly one of its strengths (not to me). Another popular, and
useful, package is ~readr~, which focuses on reading input into R. As
I wrote before, ggplot2 actually predates the "Tidyverse" by a
decade. If you're hungry for more, complete the DataCamp courses
"Introduction to the Tidyverse" and "Introduction to Data
Visualization with ggplot2", which are both quite enjoyable. I'm
thinking about using the latter as an assignment for the "Data
Visualization" course in fall 2022.
