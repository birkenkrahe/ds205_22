#+title: Exploring gapminder 3
#+author: Marcus Birkenkrahe
#+subtitle: Practice notebook for DSC 205 Spring 2022
#+options: toc:nil ^:nil
#+startup: hideblocks overview
#+property: header-args:R :session *R*
#+property: header-args:R :results output
#+property: header-args:R :exports both
* README
  
  In this notebook, you're learning how relatively simple ~ggplot2~ and
  ~dplyr~ code can create interesting plots - always provided the
  underlying dataset is interesting.

  For an overview of both of these "Tidyverse" packages, see the
  online reference pages for [[https://ggplot2.tidyverse.org/reference/][ggplot2]] and [[https://dplyr.tidyverse.org/reference/index.html][dplyr]][fn:1].

  The dataset is gapminder adapted from the original dataset created
  by Hans Rosling[fn:2].

  This workbook is adapted from chapter 10 "Data visualization in
  practice" of the textbook by [[dslabs][Irizarry (2021)]], which is also the
  basis of an introductory data science course at Harvard U.

* Emacs tip

  To *not* see the emphatic characters like ~ or * or / in the Org file
  text, run the following code chunk (or put the code in your ~/.emacs~
  file): if successful, you should see ~"t"~ in the minibuffer.

  #+begin_src emacs-lisp :results silent
    (setq-default org-hide-emphasis-markers t)
  #+end_src

  Now you need to kill this buffer (~C-x k~) and reopen the file (~C-x f~).
  
  Note: If you don't put it in your ~/.emacs~ file, the command will
  only work for the current Emacs session.

* Getting the data

  * [ ] Install and/or load the necessary packages and the ~gapminder~
    data set. If successful, you should see ~"gapminder"~ in the
    mini-buffer.

    #+name: install
    #+begin_src R :exports both :session :results silent
      ## The install commands are commented out to save time
      ##      install.packages("ggplot2")
      ##      install.packages("dplyr")
      ##      install.packages("dslabs")
      library(ggplot2)
      library(dplyr)
      library(dslabs)
      data(gapminder)
    #+end_src

* Time series plots
** Concept

   * Time series plots have /time/ in the x-axis and an /outcome/ or
     /measurement of interest/ on the y-axis.

   * Example: water flow through the river Nile between 1870 and 1970.

   * Tableau, the data analysis platform, has interesting [[https://www.tableau.com/solutions/time-series-analysis][resources]] on
     time series plots, which are very popular in finance.

   * Tableau is featured in the Data Visualization course (DSC 305).

** Classic first - the Nile

   * [X] We begin with a classic - the univariate (= 1 variable) ~Nile~ data
     set, which is a ~time series~ object. Plot this using the Base-R
     ~plot~ function and as line type: ~type="l"~.

     #+name: nile
     #+begin_src R :file nile.png :exports both :session :results output graphics file
       plot(Nile, type="l")
     #+end_src

     #+RESULTS: nile
     [[file:nile.png]]

   * [ ] Now, plot ~Nile~ using ~ggplot~. For the scatterplot and line
     plot, you need to specify both ~aes~ arguments, and you need to feed
     ~ggplot~ with a ~data.frame~.

     1) Start by turning ~Nile~ into a ~data.frame~
     2) Pipe the result into ~ggplot~
     3) Map the data in the ~aes~ function: ~x~ are the years, ~y~ is the
        ~Nile~ values
     4) Choose a line graph for the geometry

     #+name: ggnile
     #+begin_src R :file nilegg.png :exports both :session :results output graphics file
       data.frame(Nile) %>%
         ggplot(aes(x=1871:1970, y=Nile)) +
         geom_line()
     #+end_src

     #+RESULTS: ggnile
     [[file:nilegg.png]]

   * [ ] Are these last two plots identical? ~plot~ results cannot be
     stored as R objects, but ~ggplot~ results can. Compare the plots.

     1) store the ~ggplot~ in an object ~g~
     2) run ~identical~ on ~g~ and the ~plot~ command from [[nile]].

     Tip: you cannot assign a pipe to a variable, so you'll have to
     find another way of feeding ~gapminder~ to the ~ggplot~ function.

     #+name: compare
     #+begin_src R :exports both :session :results output
       g <- ggplot(data=data.frame(Nile), aes(x=1871:1970, y=Nile)) + geom_line()
       identical(g, plot(Nile, type="l"))
     #+end_src

     #+RESULTS: compare
     : [1] FALSE

   * [ ] ~g~ is a completely different R object from ~plot(Nile)~. Check
     their ~class~.

     #+name: obj
     #+begin_src R :exports both :session :results output
       class(g)
       class(plot(Nile))
     #+end_src

     #+RESULTS: obj
     : [1] "gg"     "ggplot"
     : [1] "NULL"

** US fertility rates over time: scatterplot

   * [ ] *Example:* US ~fertility~ rates from 1960 to 2012.

     1) Filter the ~country~ ~United States~ out of ~gapminder~.
     2) Plot ~year~ vs. ~fertility~ as a scatterplot.

     This pipeline command has three parts:
     1. the dataset ~%>%~
     2. the filter ~%>%~
     3. the plot - ~aes~ data mapping and geometry.

     #+name: ts1
     #+begin_src R :file ts1.png :exports both :session :results output graphics file
       gapminder %>%
         filter(country == "United States") %>%
         ggplot(aes(x = year , y = fertility)) +
         geom_point()
     #+end_src

     #+RESULTS: ts1
     [[file:ts1.png]]

** US fertility rates over time: lineplot

   * [ ] Turn the plot into a *line plot*. Lines are easier to follow
     than scattered points.

     #+name: ts2
     #+begin_src R :file ts2.png :exports both :session :results output graphics file
       gapminder %>%
         filter(country == "United States") %>%
         ggplot(aes(x = year , y = fertility)) +
         geom_line()
     #+end_src

     #+RESULTS: ts2
     [[file:ts2.png]]

** Fertility rates over time for two countries: grouping

   * [ ] Let's look at *two countries* at once.

     1) Define a ~countries~ vector with ~South Korea~ and ~Germany~ in it.
     2) Filter both countries out of ~gapminder~
     3) Add the condition ~!is.na(fertility)~ to the filter[fn:9]
     4) Make a line plot of ~year~ vs. ~fertility~

     #+name: ts3
     #+begin_src R :file ts3.png :exports both :session :results output graphics file
       countries <- c("South Korea", "Germany")

       gapminder %>%
         filter(country %in% countries) %>%
         ggplot(aes(x=year,y=fertility)) +
         geom_line()
     #+end_src

     #+RESULTS: ts3
     [[file:ts3.png]]

   * Bummer! We haven't told ~ggplot~ anything about separating these
     data, so they're all connected by the same line.

   * [ ] To *separate* the data from different countries, we use the
     ~group~ attribute in the ~aes~ data mapping function: repeat the last
     command, and add ~group = country~ as an argument to ~aes()~.

     /You can learn more about [[https://ggplot2.tidyverse.org/reference/aes_group_order.html][grouping aesthetics here]]./

     #+name: ts4
     #+begin_src R :file ts4.png :exports both :session :results output graphics file
       countries <- c("South Korea", "Germany")

       gapminder %>%
         filter(country %in% countries) %>%
         ggplot(aes(x=year,y=fertility,group=country)) +
         geom_line()
     #+end_src

     #+RESULTS: ts4
     [[file:ts4.png]]


   * [ ] But *which line* belongs to which country? Use the ~color~
     argument to assign different colors to different
     countries. Useful: the ~color~ argument to ~aes~ automatically groups
     the data (so ~group~ is implied).

     #+name: ts5
     #+begin_src R :file ts5.png :exports both :session :results output graphics file
       countries <- c("South Korea", "Germany")

       gapminder %>%
         filter(country %in% countries) %>%
         ggplot(aes(x=year,y=fertility,color=country)) +
         geom_line()
     #+end_src

     #+RESULTS: ts5
     [[file:ts5.png]]

   * At this point, aren't you curious what happened in South Korea
     between 1960 and 1990? [[https://en.wikipedia.org/wiki/South_Korea#Post-Korean_War_(1960%E2%80%931990)][Check it here]].

** Fertility rates over time for two countries: text labels

   * For trend plots, labeling is clearer than legend, as long as
     there are not too many lines present.

   * [ ] The geometry ~geom_text()~ is responsible for text labels. Make
     a *labelled* time series plot of ~year~ vs. ~life_expectancy~ for both
     countries, ~"South Korea"~ and ~"Germany"~.

     1) define a data frame called ~labels~ with three elements:
        - a vector of countries: ~country = countries~
        - a pair (x,y) for positioning the text labels:
          ~x = c(1975, 1965)~ and ~y = c(60, 72)~
     2) add a ~geom_text()~ layer for the ~labels~ data. For the mapping,
        use the x,y vectors and the ~label~ argument ~country~.
     3) add a ~theme~ layer that removes the legend.

     You find the full code below: make sure you understand it, run
     it, and look at the graphical output.

   #+name: ts6
   #+begin_src R :file ts6.png :exports both :session :results output graphics file
     labels <- data.frame(country = countries,
                          x = c(1975, 1965),
                          y = c(60,72))
     gapminder %>%
       filter(country %in% countries ) %>%
       ggplot(aes(x = year,y = life_expectancy, color = country)) +
       geom_line() +
       geom_text(data = labels,
                 aes(x,y, label = country), size = 5) +
       theme(legend.position = "none")
   #+end_src

   #+RESULTS: ts6
   [[file:ts6.png]]

   * [ ] Now *do this yourself*: change the code in [[ts5]], ~fertility
     vs. year~ from a plot with legend to a plot with labels for both
     countries, and remove the legend.

     /Tip: look at the plot before setting the position vectors x,y./

     #+name: ts7
     #+begin_src R :file ts7.png :exports both :session :results output graphics file
       labels <- ???

         gapminder %>%
         filter(country %in% countries) %>%
         ggplot(aes(x = year,y = fertility, color = country)) +
         geom_line() +
         ??? +
         ???
     #+end_src
     